<?xml version="1.0"?>
<chapter xmlns="http://docbook.org/ns/docbook">
  <title>SEQUENTIAL INPUT AND OUTPUT</title>
  <section>
    <title>INTRODUCTION TO THE SEQUENTIAL I-O MODULE</title>
    <para>
The Sequential I-O module provides a capability to access records of a
file in established sequence. The sequence is established as a result of
writing the records to the file. It also provides for the specification of
re-run points and the sharing of memory areas among files.
</para>
    <section>
      <title>LANGUAGE CONCEPTS</title>
      <indexterm>
        <primary>Language Concepts</primary>
      </indexterm>
      <section>
        <title>Organization</title>
      <indexterm>
        <primary>Organisation, Sequential</primary>
      </indexterm>
        <para>
Sequential files are organized such that each record in the file except
the first has a unique predecessor record, and each record except the last
has a unique successor record. These predecessor-successor relationships
are established by the order of WRITE statements when the file is created.
Once established, the predecessor-successor relationships do not change
except in the case where records are added to the end of the file.
</para>
      </section>
      <section>
        <title>Access Mode</title>
        <indexterm>
          <primary>Access Mode</primary>
        </indexterm>
        <indexterm>
          <primary>Mode, Access</primary>
        </indexterm>
        <para>
In the sequential access mode, the sequence in which records are
accessed is the order in which the records were originally written.
</para>
      </section>
      <section>
        <title>Current Record Pointer</title>
        <indexterm>
          <primary>Current Record Pointer</primary>
        </indexterm>
        <indexterm>
          <primary>Record Pointer, Current</primary>
        </indexterm>
        <para>
The current record pointer is a conceptual entity used in this document
to facilitate specification of the next record to be accessed within a given
file. The concept of the current record pointer has no meaning for a file
opened in the output mode. The setting of the current record pointer is
affected only by the OPEN and READ statements.
</para>
      </section>
      <section xml:id="sec5.i.o">
        <title>I-O Status</title>
        <indexterm>
          <primary>Input-Output Status</primary>
        </indexterm>
        <indexterm>
          <primary>Status, Input-Output</primary>
        </indexterm>
        <para>
If the FILE STATUS clause is specified in a file control entry, a value
is placed into the specified two-character data item during the execution of
an OPEN, CLOSE, READ, WRITE, or REWRITE statement and before any applicable
USE procedure is executed, to indicate to the COBOL program the status of
that input-output operation.
</para>
        <section>
          <title>Status Key 1</title>
          <indexterm>
            <primary>Status Keys</primary>
          </indexterm>
          <indexterm>
            <primary>Keys, Status</primary>
          </indexterm>
          <para>
The leftmost character position of the FILE STATUS data item is known
as Status Key 1 and is set to indicate one of the following conditions upon
completion of the input-output operation.
</para>
          <itemizedlist mark="none" spacing="compact">
            <listitem>
              <para>
            '0' -     indicates Successful Completion
          </para>
            </listitem>
            <listitem>
              <para>
            '1' -    indicates At End
          </para>
            </listitem>
            <listitem>
              <para>
            '3' -     indicates Permanent Error
          </para>
            </listitem>
            <listitem>
              <para>
            '9' -     indicates an Operating System Error Message
          </para>
            </listitem>
          </itemizedlist>
          <para>
     The meaning of the above indications are as follows:
</para>
          <variablelist>
            <varlistentry>
              <term>0</term>
              <listitem>
                <para>Successful Completion. The input-output statement was
               successfully executed.
               </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>1</term>
              <listitem>
                <para>At End. The sequential READ statement was unsuccessfully
               executed as a result of an attempt to read a record when no
               next logical record exists in the file
               </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>3</term>
              <listitem>
                <para>Permanent Error. The input-output statement was
               unsuccessfully executed as the result of a boundary violation
               for a sequential file or as the result of an input-output
               error, such as data check parity error, or transmission error.
               </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>9</term>
              <listitem>
                <para>Operating System Error Message. The input-output statement
               was unsuccessfully executed as a result of a condition that
               is specified by the Operating System Error Message. This
               value is used only to indicate a condition not indicated by
               other defined values of status key 1, or by specified
               combinations of the values of status key 1 and status key 2.
               </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <section>
          <title>Status Key 2</title>
          <para>
The rightmost character position of the FILE STATUS data item is known
as Status Key 2 and is used to further describe the results of the
input-output operation. This character will contain a value as follows:
</para>
          <itemizedlist>
            <listitem>
              <para>
If no further information is available concerning the input-output
operation, then status key 2 contains a value of '0'.
          </para>
            </listitem>
            <listitem>
              <para>
When status key 1 contains a value of '3' an irrecoverable error
has occurred. This is treated as a fatal error by the Operating System.
          </para>
            </listitem>
            <listitem>
              <para>
When status key 1 contains a value of '9', the value of status key
2 is the operating system error message number (for those
operating systems which designate errors numerically).
The <citetitle pubwork="book">CIS COBOL Operating Guide</citetitle>
specific to your operating system contains
details of this status-key-2 representation.
Note that it is not possible to extract this number directly.
</para>
            </listitem>
          </itemizedlist>
        </section>
        <section>
          <title>Valid Combinations of Status Keys 1 and 2</title>
          <para>
     The valid permissible combinations of the values of status key 1 and
status key 2 are shown in the following table. An 'X' at an intersection
indicates a valid permissible combination.
</para>
          <informaltable frame="all" colsep="1" rowsep="1">
            <tgroup cols="2">
              <colspec colnum="1" align="left"/>
              <tbody>
                <row>
                  <entry morerows="1">Status Key 1</entry>
                  <entry>Status Key 2</entry>
                </row>
                <row>
                  <entry>No Further Information (0)</entry>
                </row>
                <row>
                  <entry>Successful Completion (0)</entry>
                  <entry>X</entry>
                </row>
                <row>
                  <entry>At End (1)</entry>
                  <entry>X</entry>
                </row>
                <row>
                  <entry>Permanent Error (3)</entry>
                  <entry>X</entry>
                </row>
                <row>
                  <entry>Implementor Defined (9)</entry>
                  <entry>O/S Error Number</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section>
          <title>The AT END Condition</title>
          <indexterm>
            <primary>AT END Condition</primary>
          </indexterm>
          <indexterm>
            <primary>Conditions, AT END</primary>
          </indexterm>
          <para>
The AT END condition can occur as a result of the execution of a READ
statement. For details of the causes of the condition,
see THE READ STATEMENT later in this Chapter.
</para>
        </section>
      </section>
    </section>
    <section>
      <title>ENVIRONMENT DIVISION IN THE SEQUENTIAL I-O MODULE</title>
      <indexterm>
        <primary>Environment Division in Sequential</primary>
      </indexterm>
      <indexterm>
        <primary>Sequential I-O Module, Environment Division</primary>
      </indexterm>
      <section>
        <title>INPUT-OUTPUT SECTION</title>
        <indexterm>
          <primary>Input-Output Section</primary>
        </indexterm>
        <indexterm>
          <primary>Section, Input-Output</primary>
        </indexterm>
        <section>
          <title>The FILE-CONTROL Paragraph</title>
          <indexterm>
            <primary>FILE-CONTROL Paragraph</primary>
          </indexterm>
          <indexterm>
            <primary>Paragraph, FILE-CONTROL</primary>
          </indexterm>
          <section>
            <title>Function</title>
            <para>
The FILE-CONTROL paragraph names each file and allows specification of
other file-related information. (See also Appendix I in this manual).
          </para>
          </section>
          <section>
            <title>General Format</title>
            <cmdsynopsis>
              <command>FILE-CONTROL.</command>
              <arg rep="repeat">file-control-entry</arg>
            </cmdsynopsis>
          </section>
        </section>
        <section>
          <title>The FILE CONTROL Entry</title>
          <indexterm>
            <primary>FILE-CONTROL Entry</primary>
          </indexterm>
          <indexterm>
            <primary>Entry, FILE-CONTROL</primary>
          </indexterm>
          <indexterm>
            <primary>SELECT Clause</primary>
          </indexterm>
          <indexterm>
            <primary>Clause, SELECT</primary>
          </indexterm>
          <section>
            <title>Function</title>
            <para>
The file control entry names a file and may specify other file-related information.
</para>
          </section>
          <section>
            <title>General Format</title>
        <indexterm>
          <primary>FILE STATUS Clause</primary>
        </indexterm>
        <indexterm>
          <primary>Clause, FILE STATUS</primary>
        </indexterm>
            <cmdsynopsis>
              <command>SELECT</command>
              <arg>file-name</arg>
              <sbr/>
              <arg>ASSIGN TO</arg>
              <group choice="req">
                <arg>external-file-name-literal</arg>
                <arg>file-identifier</arg>
              </group>
              <arg choice="opt">
                <arg>,</arg>
                <group>
                  <arg>external-file-name-literal</arg>
                  <arg>file-identifier</arg>
                </group>
              </arg>
              <sbr/>
              <arg choice="opt">
                <arg>; ORGANIZATION IS</arg>
                <group>
                  <arg>SEQUENTIAL</arg>
                  <arg>LINE SEQUENTIAL</arg>
                </group>
              </arg>
              <sbr/>
              <arg choice="opt">; ACCESS MODE IS SEQUENTIAL</arg>
              <sbr/>
              <arg choice="opt">; FILE STATUS IS data-name-1</arg>
            </cmdsynopsis>
          </section>
          <section>
            <title>Syntax Rules</title>
            <orderedlist>
              <listitem>
                <para>
The SELECT clause must be specified first in the file control entry.
The clauses which follow the SELECT clause may appear in any order.
          </para>
              </listitem>
              <listitem>
                <para>
Each file described in the Data Division must be named once and only
once as file-name in the FILE-CONTROL paragraph. Each file specified
in the file control entry must have a file description entry in the Data Division.
          </para>
              </listitem>
              <listitem>
                <para>
If the ACCESS MODE clause is not specified, the ACCESS MODE IS
     SEQUENTIAL clause is implied.
          </para>
              </listitem>
              <listitem>
                <para>
Data-name-1 must be defined in the Data Division as a two-character
     data item of the category alphanumeric and must not be defined in the File Section.
          </para>
              </listitem>
              <listitem>
                <para>
When the ORGANIZATION IS SEQUENTIAL clause is not specified, the
ORGANIZATION IS SEQUENTIAL clause is implied.
          </para>
              </listitem>
            </orderedlist>
          </section>
          <section>
            <title>General Rules</title>
            <indexterm>
              <primary>ASSIGN Clause</primary>
            </indexterm>
            <indexterm>
              <primary>Clause, ASSIGN</primary>
            </indexterm>
            <orderedlist>
              <listitem>
                <para>
The ASSIGN clause specifies the association of the file referenced by
file-name to a storage medium. See Appendix F in the <citetitle pubwork="book">CIS COBOL Operating Guide</citetitle>.
<phrase role="extension">The first assignment takes effect.
Subsequent assignments within any one ASSIGN clause are for documentation purposes only.</phrase>
          </para>
              </listitem>
              <listitem>
                <para>
                <indexterm>
                  <primary>ORGANIZATION IS SEQUENTIAL</primary>
                </indexterm>
                <indexterm>
                  <primary>ORGANIZATION IS LINE SEQUENTIAL</primary>
                </indexterm>
                <indexterm>
                  <primary>Organization, LINE SEQUENTIAL</primary>
                </indexterm>
                <indexterm>
                  <primary>Clause, ORGANIZATION</primary>
                </indexterm>
The ORGANIZATION clause specifies the logical structure of a file. The
file organization is established at the time a file is created and
cannot subsequently be changed.
          </para>
              </listitem>
              <listitem>
                <para>
                  <phrase role="extension">When LINE SEQUENTIAL ORGANIZATION is specified, the file is treated as
consisting of variable length records, each record containing one line of data.
The definition of a line of data varies with different operating systems.
Some terminate line "records" with the Carriage Return and Line Feed characters,
or one of them, and some pad out as fixed length records. CIS COBOL therefore
is always compatible with the Editor software in any Operating System in this respect.</phrase>
                </para>
              </listitem>
              <listitem>
                <para>
Records in the file are accessed in the sequence dictated by the file organization.
This sequence is specified by predecessor-successor
record relationships established by the execution of WRITE statements
when the file is created or extended.
          </para>
              </listitem>
              <listitem>
                <para>
When the FILE STATUS clause is specified, a value will be moved by the
operating system into the data item specified by data-name-1 after the
execution of every statement that references that file either
explicitly or implicitly. This value indicates the status of execution
of the statement (See <xref linkend="sec5.i.o"/> in this Chapter).
          </para>
              </listitem>
            </orderedlist>
          </section>
        </section>
        <section>
          <title>The I-O-CONTROL Paragraph</title>
          <indexterm>
            <primary>I-O Control Paragraph</primary>
          </indexterm>
          <indexterm>
            <primary>Paragraph, I-O CONTROL</primary>
          </indexterm>
          <section>
            <title>Function</title>
            <para>
The I-O CONTROL paragraph specifies the points at which re-run is to be
established, the memory area which is to be shared by different files, and
the location of files on a multiple file reel.
</para>
          </section>
          <section>
            <title>General Format</title>
            <cmdsynopsis>
              <command>I-O-CONTROL.</command>
              <arg choice="opt" rep="repeat">
                <arg>; RERUN</arg>
                <arg choice="opt">
                  <arg>ON</arg>
                  <group choice="req">
                    <arg>file-name-1</arg>
                    <arg>implementor-name</arg>
                  </group>
                </arg>
                <arg>EVERY</arg>
                <group choice="req">
                  <group choice="req">
                    <arg>
                      <arg choice="opt">END OF</arg>
                      <group choice="req">
                        <arg>REEL</arg>
                        <arg>UNIT</arg>
                      </group>
                    </arg>
                    <arg>integer-1 RECORDS</arg>
                  </group>
                  <arg>OF file-name-2</arg>
                  <arg>integer-2 CLOCK-UNITS</arg>
                  <arg>condition-name</arg>
                </group>
              </arg>
              <arg choice="opt" rep="repeat">
                <arg>; SAME AREA FOR file-name-3</arg>
                <arg choice="opt" rep="repeat">, file-name-4</arg>
              </arg>
              <arg>.</arg>
            </cmdsynopsis>
          </section>
          <section>
            <title>Syntax Rules</title>
            <orderedlist>
              <listitem>
                <para>
The I-O-CONTROL paragraph is optional.
<phrase role="extension">The whole clause is for documentation only when present.</phrase>
          </para>
              </listitem>
              <listitem>
                <para>
File-name-1 must be a sequentially organized file.
          </para>
              </listitem>
              <listitem>
                <para>
The END OF REEL/UNIT clause may only be used if file-name-2 is a
sequentially organized file and is for documentation purposes only.
          </para>
              </listitem>
              <listitem>
                <para>
When either the integer-1 RECORDS clause or the integer-2 CLOCK-UNITS
 clause is specified, implementor-name must be given in the RERUN clause.
          </para>
              </listitem>
              <listitem>
                <para>
More than one RERUN clause may be specified for a given file-name-2.
          </para>
              </listitem>
              <listitem>
                <para>
The files referenced in the SAME AREA clause need not all have the same organization or access.
          </para>
              </listitem>
            </orderedlist>
          </section>
          <section>
            <title>General Rules</title>
            <orderedlist>
              <listitem>
                <para>
                  <phrase role="extension">The RERUN clause is treated as for documentation purposes only.</phrase>
                </para>
              </listitem>
              <listitem>
                <para>
                  <phrase role="extension">The SAME AREA clause is treated as for documentation purposes only.</phrase>
                </para>
              </listitem>
            </orderedlist>
          </section>
        </section>
      </section>
    </section>
    <section>
      <title>DATA DIVISION IN THE SEQUENTIAL I-O MODULE</title>
      <indexterm>
        <primary>Data Division in Sequential</primary>
      </indexterm>
      <indexterm>
        <primary>Sequential I-O Module, Data Division</primary>
      </indexterm>
      <section>
        <title>FILE SECTION</title>
        <indexterm>
          <primary>FILE Section</primary>
        </indexterm>
        <indexterm>
          <primary>Section, FILE</primary>
        </indexterm>
        <para>
In a CIS COBOL program the file description entry (FD) represents the
highest level of organisation in the File Section. The File Section header
is followed by a file description entry consisting of a level indicator
(FD), a file-name and a series of independent clauses. The FD clauses
specify the size of the logical and physical records, the presence or
absence of label records, the value of implementor-defined label items, the
names of the data records which comprise the file. The entry itself is
terminated by a period.
</para>
      </section>
      <section>
        <title>RECORD DESCRIPTION STRUCTURE</title>
        <indexterm>
          <primary>Record Description Structure</primary>
        </indexterm>
        <indexterm>
          <primary>Structure, Record Description</primary>
        </indexterm>
        <para>
      A record description consists of a set of data description entries
which describe the characteristics of a particular record. Each data
description entry consists of a level-number followed by a data-name if
required, followed by a series of independent clauses as required. A record
description has a hierarchical structure and therefore the clauses used with
an entry may vary considerably, depending upon whether or not it is followed
by subordinate entries. The structure of a record description is defined in
CONCEPT OF LEVELS in Chapter 2, while the elements allowed in a record
description are shown in the <xref linkend="c03.skeleton"/> in Chapter 3.

</para>
      </section>
      <section>
        <title>THE FILE DESCRIPTION - COMPLETE ENTRY SKELETON</title>
        <indexterm>
          <primary>File Description Entry</primary>
        </indexterm>
        <section>
          <title>Function</title>
          <para>
        The file description furnishes information concerning the physical
   structure, identification, and record names pertaining to a given file.
</para>
        </section>
        <section>
          <title>General Format</title>
          <cmdsynopsis>
            <command>FD</command>
            <arg>file-name</arg>
            <arg choice="opt">
              <arg>; BLOCK CONTAINS integer-2</arg>
              <group choice="req">
                <arg>RECORDS</arg>
                <arg>CHARACTERS</arg>
              </group>
            </arg>
            <sbr/>
            <arg choice="opt">
              <arg>; RECORD CONTAINS</arg>
              <arg choice="opt">integer-3 TO</arg>
              <arg>integer-4 CHARACTERS</arg>
            </arg>
            <sbr/>
            <arg choice="opt">
              <arg>; LABEL</arg>
              <group choice="req">
                <arg>RECORD IS</arg>
                <arg>RECORDS ARE</arg>
              </group>
              <group choice="req">
                <arg>STANDARD</arg>
                <arg>OMITTED</arg>
              </group>
            </arg>
            <sbr/>
            <arg choice="opt">
              <arg>; VALUE OF data-name-1 IS literal-1</arg>
              <arg choice="opt" rep="repeat">, data-name-2 IS literal-2</arg>
            </arg>
            <arg choice="opt">
              <arg>; DATA</arg>
              <group choice="req">
                <arg>RECORD IS</arg>
                <arg>RECORDS ARE</arg>
              </group>
              <arg>data-name-3</arg>
              <arg choice="opt">, data-name-4</arg>
            </arg>
            <sbr/>
            <arg choice="opt">; CODE-SET IS alphabet-name</arg>
          </cmdsynopsis>
        </section>
        <section>
          <title>Syntax Rules</title>
          <orderedlist>
            <listitem>
              <para>
The level indicator FD identifies the beginning of a file description and must precede the file-name.
</para>
            </listitem>
            <listitem>
              <para>
   The clauses which follow the name of the file are optional in many cases,
          and their order of appearance is immaterial. All clauses are
        optional when the ANSI switch is unset (See Chapter 2).
</para>
            </listitem>
            <listitem>
              <para>
   One or more record description entries must follow the file description
         entry.
</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section>
        <title>THE BLOCK CONTAINS CLAUSE</title>
        <indexterm>
          <primary>BLOCK CONTAINS Clause</primary>
        </indexterm>
        <indexterm>
          <primary>Clause, BLOCK CONTAINS</primary>
        </indexterm>
        <section>
          <title>Function</title>
          <para>
      The BLOCK CONTAINS clause specifies the size of a physical record.
</para>
        </section>
        <section>
          <title>General Format</title>
          <cmdsynopsis>
            <command>BLOCK CONTAINS</command>
            <arg>integer</arg>
            <group choice="req">
              <arg>RECORDS</arg>
              <arg>CHARACTERS</arg>
            </group>
          </cmdsynopsis>
        </section>
        <section>
          <title>General Rule</title>
          <para>
            <phrase role="extension">This clause is required for documentation purposes only.</phrase>
          </para>
        </section>
      </section>
      <section>
        <title>THE CODE-SET CLAUSE</title>
        <indexterm>
          <primary>CODE-SET Clause</primary>
        </indexterm>
        <indexterm>
          <primary>Clause, CODE-SET</primary>
        </indexterm>
        <section>
          <title>Function</title>
          <para>
      The CODE-SET clause specifies the character code set used to represent
data on the external media.
</para>
        </section>
        <section>
          <title>General Format</title>
          <cmdsynopsis>
            <command>CODE-SET IS</command>
            <arg>alphabet-name</arg>
          </cmdsynopsis>
        </section>
        <section>
          <title>Syntax Rules</title>
          <orderedlist>
            <listitem>
              <para>
When the CODE-SET clause is specified for a file, all data in that file
      must be described as usage is DISPLAY and any signed numeric data must
      be described with the SIGN IS SEPARATE clause.
</para>
            </listitem>
            <listitem>
              <para>
The alphabet-name clause referenced by the CODE-SET clause must not
      specify the literal phrase.
</para>
            </listitem>
            <listitem>
              <para>
The CODE-SET clause may only be specified for non-disk files.
</para>
            </listitem>
          </orderedlist>
        </section>
        <section>
          <title>General Rule</title>
          <para>
            <phrase role="extension">The CODE-SET clause is specified for documentation purposes only.</phrase>
          </para>
        </section>
      </section>
      <section>
        <title>THE DATA RECORDS CLAUSE</title>
        <indexterm>
          <primary>DATA RECORDS Clause</primary>
        </indexterm>
        <indexterm>
          <primary>Clause, DATA RECORDS</primary>
        </indexterm>
        <section>
          <title>Function</title>
          <para>
      The DATA RECORDS clause serves only as documentation for the names of
data records with their associated file.
</para>
        </section>
        <section>
          <title>General Format</title>
          <cmdsynopsis>
            <arg>DATA</arg>
            <group choice="req">
              <arg>RECORD IS</arg>
              <arg>RECORDS ARE</arg>
            </group>
            <arg>data-name-1</arg>
            <arg choice="opt">, data-name-2</arg>
          </cmdsynopsis>
        </section>
        <section>
          <title>Syntax Rule</title>
          <para>
     Data-name-1 and data-name-2 are the names of data records and should
     have 01 level-number record descriptions, with the same names,
     associated with them.
</para>
        </section>
        <section>
          <title>General Rules</title>
          <orderedlist>
            <listitem>
              <para>
   The presence of more than one data-name indicates that the file
     contains more than one type of data record. These records may be of
     differing sizes, different formats, etc. The order in which they are
     listed is not significant.
</para>
            </listitem>
            <listitem>
              <para>
   Conceptually, all data records within a file share the same area. This
     is in no way altered by the presence of more than one type of data
     record within the file.
</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section>
        <title>THE LABEL RECORDS CLAUSE</title>
        <indexterm>
          <primary>LABEL RECORDS Clause</primary>
        </indexterm>
        <indexterm>
          <primary>Clause, LABEL RECORDS</primary>
        </indexterm>
        <section>
          <title>Function</title>
          <para>
            <phrase role="extension">The LABEL RECORDS clause specifies whether labels are present.</phrase>
          </para>
        </section>
        <section>
          <title>General Format</title>
          <cmdsynopsis>
            <arg>LABEL</arg>
            <group choice="req">
              <arg>RECORD IS</arg>
              <arg>RECORDS ARE</arg>
            </group>
            <group choice="req">
              <arg>STANDARD</arg>
              <arg>OMITTED</arg>
            </group>
          </cmdsynopsis>
        </section>
        <section>
          <title>Syntax Rule</title>
          <para>
This clause is required in every file description entry,
<phrase role="extension">when the ANSI switch is set.</phrase>
</para>
        </section>
        <section>
          <title>General Rule</title>
          <para>
            <phrase role="extension">This clause is used for documentation purposes only.</phrase>
          </para>
        </section>
      </section>
      <section>
        <title>THE RECORD CONTAINS CLAUSE</title>
        <indexterm>
          <primary>RECORD CONTAINS Clause</primary>
        </indexterm>
        <indexterm>
          <primary>Clause, RECORD CONTAINS</primary>
        </indexterm>
        <section>
          <title>Function</title>
          <para>
     The RECORD CONTAINS clause specifies the size of data records.
</para>
        </section>
        <section>
          <title>General Format</title>
          <cmdsynopsis>
            <arg>RECORD CONTAINS</arg>
            <arg choice="opt">integer-1 TO</arg>
            <arg>integer-2 CHARACTERS</arg>
          </cmdsynopsis>
        </section>
        <section>
          <title>General Rule</title>
          <para>
     The size of each data record is completely defined   within the record
     description entry, therefore this clause is never required.
<phrase role="extension">The RECORD CONTAINS clause is specified for documentation purposes only.</phrase>
</para>
        </section>
      </section>
      <section>
        <title>THE VALUE OF CLAUSE</title>
        <indexterm>
          <primary>VALUE OF Clause</primary>
        </indexterm>
        <indexterm>
          <primary>Clause, VALUE OF</primary>
        </indexterm>
        <section>
          <title>Function</title>
          <para>
     The VALUE OF clause specifies the description of an item in the label
records associated with a file.
</para>
        </section>
        <section>
          <title>General Format</title>
          <cmdsynopsis>
            <arg>VALUE OF</arg>
            <arg>data-name-1 IS literal-1</arg>
            <arg choice="opt" rep="repeat">, data-name-2 IS literal-2</arg>
          </cmdsynopsis>
        </section>
        <section>
          <title>General Rules</title>
          <orderedlist>
            <listitem>
              <para>
                <phrase role="extension">This clause is used for documentation purposes only.</phrase>
              </para>
            </listitem>
            <listitem>
              <para>
   A figurative constant may be substituted in the format above wherever a
     literal is specified.
</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
    </section>
    <section>
      <title>PROCEDURE DIVISION IN THE SEQUENTIAL I-O MODULE</title>
      <indexterm>
        <primary>Procedure Division in Sequential</primary>
      </indexterm>
      <indexterm>
        <primary>Sequential I-O Module, Procedure Division</primary>
      </indexterm>
    </section>
    <section>
      <title>THE CLOSE STATEMENT</title>
      <indexterm>
        <primary>CLOSE Statement</primary>
      </indexterm>
      <indexterm>
        <primary>Statement, CLOSE</primary>
      </indexterm>
      <section>
        <title>Function</title>
        <para>
     The CLOSE statement terminates the processing of files.
</para>
      </section>
      <section>
        <title>General Format</title>
        <cmdsynopsis>
          <arg>CLOSE</arg>
          <arg>file-name-1</arg>
          <group choice="req">
            <arg>REEL</arg>
            <arg>UNIT</arg>
          </group>
        </cmdsynopsis>
      </section>
      <section>
        <title>Syntax Rule</title>
        <para>
The REEL or UNIT phrase must only be used for sequential files, and are
for documentation purposes only.
</para>
      </section>
      <section>
        <title>General Rules</title>
        <orderedlist>
          <listitem>
            <para>
   A CLOSE statement may only be executed for a file in an open mode.
      </para>
          </listitem>
          <listitem>
            <para>
   The action taken if the file is in the open mode when a STOP RUN
     statement is executed is to close the file. The action taken for a file
     that has been opened in a called program and not closed in that program
     prior to the execution of a CANCEL statement for that program is to
     leave the file open.
      </para>
          </listitem>
          <listitem>
            <para>
   If a CLOSE statement has been executed for a file, no other statement
     can be executed that references that file, either explicitly or
     implicitly, unless an intervening OPEN statement for that file is
     executed.
      </para>
          </listitem>
          <listitem>
            <para>
   Following the successful execution of a CLOSE statement the record area
     associated with file-name is no longer available. The unsuccessful
     execution of such a CLOSE statement leaves the availability of the
     record area undefined.
      </para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section>
      <title>THE OPEN STATEMENT</title>
      <indexterm>
        <primary>OPEN Statement</primary>
      </indexterm>
      <indexterm>
        <primary>Statement, OPEN</primary>
      </indexterm>
      <section>
        <title>Function</title>
        <para>
     The OPEN statement initiates the processing of files. It also performs
checking and/or writing of labels and other input-output operations.
</para>
      </section>
      <section>
        <title>General Format</title>
        <cmdsynopsis>
          <command>OPEN</command>
          <group choice="req">
            <arg>
              <arg>INPUT file-name-1</arg>
              <arg choice="opt" rep="repeat">, file-name-2</arg>
              <arg>OUTPUT file-name-3</arg>
              <arg choice="opt" rep="repeat">, file-name-4</arg>
              <arg>I-O file-name-5</arg>
              <arg choice="opt" rep="repeat">, file-name-6</arg>
              <arg>EXTEND file-name-7</arg>
              <arg choice="opt" rep="repeat">, file-name-8</arg>
            </arg>
          </group>
        </cmdsynopsis>
      </section>
      <section>
        <title>Syntax Rules</title>
        <orderedlist>
          <listitem>
            <para>
The I-O phrase can only be used for disk files, except for files in line sequential organization.
      </para>
          </listitem>
          <listitem>
            <para>
The EXTEND phrase can only by used for sequential files and line sequential files.
</para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>General Rules</title>
        <orderedlist>
          <listitem>
            <para>
The successful execution of an OPEN statement determines the availability
of the file and results in the file being in an open mode.
      </para>
          </listitem>
          <listitem>
            <para>
The successful execution of an OPEN statement makes the associated
record area available to the program.
      </para>
          </listitem>
          <listitem>
            <para>
Prior to the successful execution of an OPEN statement for a given
file, no statement can be executed that references that file, either
explicitly or implicitly.
      </para>
          </listitem>
          <listitem>
            <para>
An OPEN statement must be successfully executed prior to the execution
of any of the permissible input-output statements. In Table 5-1, 'X'
at an intersection indicates that the specified statement, used in the
sequential access mode, may be used with the sequential file
organization and open mode given at the top of the column.
</para>
            <table frame="all" colsep="1" rowsep="1">
              <title>Permissable Combinations of Statements and OPEN Modes for Sequential I/O.</title>
              <tgroup cols="5">
                <colspec colname="c1"/>
                <colspec colname="c2"/>
                <colspec colname="c3"/>
                <colspec colname="c4"/>
                <colspec colname="c5"/>
                <tbody>
                  <row>
                    <entry>Statement</entry>
                    <entry namest="c2" nameend="c5">Open Mode</entry>
                  </row>
                  <row>
                    <entry morerows="1">READ</entry>
                    <entry>Input</entry>
                    <entry>Output</entry>
                    <entry>Input-Output</entry>
                    <entry>Extend</entry>
                  </row>
                  <row>
                    <entry>X</entry>
                    <entry/>
                    <entry>X</entry>
                    <entry/>
                  </row>
                  <row>
                    <entry>WRITE</entry>
                    <entry/>
                    <entry>X</entry>
                    <entry/>
                    <entry>X</entry>
                  </row>
                  <row>
                    <entry>REWRITE</entry>
                    <entry/>
                    <entry/>
                    <entry>X</entry>
                    <entry/>
                  </row>
                  <row>
                    <entry namest="c1" nameend="c5">
                      <phrase role="extension">This OPEN mode is not supported for ORGANIZATION line sequential files.</phrase>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </listitem>
          <listitem>
            <para>
A file may be opened with the INPUT, OUTPUT, EXTEND and I-O phrases in
the same program. Following the initial execution of an OPEN statement
for a file, each subsequent OPEN statement execution for that same file
must be preceded by the execution of a CLOSE statement, for that file.
      </para>
          </listitem>
          <listitem>
            <para>
Execution of the OPEN statement does not obtain or release the first data record.
      </para>
          </listitem>
          <listitem>
            <para>
The ASSIGNed name in the SELECT statement for a file is processed as follows:
</para>
            <orderedlist>
              <listitem>
                <para>
When the INPUT phrase is specified, the execution of the OPEN
statement causes the ASSIGNed name to be checked in accordance
with the operating system conventions for opening files for input.
</para>
              </listitem>
              <listitem>
                <para>
When the OUTPUT phrase is specified, the execution of the OPEN
statement causes the ASSIGNed name to be written in accordance
with the operating system conventions for opening files for output.
      </para>
              </listitem>
            </orderedlist>
          </listitem>
          <listitem>
            <para>
The file description entry for file-name-1, file-name-5, must be
equivalent to that used when this file was created.
      </para>
          </listitem>
          <listitem>
            <para>
If the storage medium for the file permits rewinding, execution of the
OPEN statement causes the file to be positioned at its beginning.
      </para>
          </listitem>
          <listitem>
            <para>
For files being opened with the INPUT or I-O phrase, the OPEN statement
sets the current record pointer to the first record currently existing
within the file. If no records exist in the file, the current record
pointer is set such that the next executed READ statement for the file
will result in an AT END condition. If the file does not exist, OPEN
INPUT will cause an error status.
      </para>
          </listitem>
          <listitem>
            <para>
When the EXTEND phrase is specified, the OPEN statement positions the
file immediately following the last logical record of that file.
Subsequent WRITE statements referencing the file will add records to
the file as though the file had been opened with the OUTPUT phrase.
  <phrase role="extension">If the file does not exist it will be created.</phrase>
      </para>
          </listitem>
          <listitem>
            <para>
The I-O phrase permits the opening of a disk for both input and output
operation except for file in ORGANIZATION LINE SEQUENTIAL.
      </para>
          </listitem>
          <listitem>
            <para>
Upon successful execution of an OPEN statement with the OUTPUT phrase
    specified, a file is created. At that time the associated file
    contains no data records.
      </para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section>
      <title>THE READ STATEMENT</title>
      <indexterm>
        <primary>READ Statement</primary>
      </indexterm>
      <indexterm>
        <primary>Statement, READ</primary>
      </indexterm>
      <section>
        <title>Function</title>
        <para>
        The READ statement makes available the next logical record from a file,
</para>
      </section>
      <section>
        <title>General Format</title>
        <cmdsynopsis>
          <command>READ</command>
          <arg>file-name</arg>
          <arg>RECORD</arg>
          <arg choice="opt">INTO identifier</arg>
          <arg choice="opt">; AT END imperative- statement</arg>
        </cmdsynopsis>
      </section>
      <section>
        <title>Syntax Rules</title>
        <orderedlist>
          <listitem>
            <para>
The INTO phrase must not be used when the input file contains logical
records of various sizes as indicated by their record descriptions.
The storage area associated with identifier and the record area
associated with file-name must not be the same storage area.
</para>
          </listitem>
          <listitem>
            <para>
The AT END phrase must be specified if no applicable USE procedure is
specified for file-name,
</para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>General Rules</title>
        <orderedlist>
          <listitem>
            <para>
The associated file must be open in the INPUT or I-O mode at the time
this statement is executed. (See THE OPEN STATEMENT in this Chapter).
</para>
          </listitem>
          <listitem>
            <para>
The record to be made available by the READ statement is determined as follows:
</para>
            <orderedlist>
              <listitem>
                <para>
            If the current record pointer was positioned by the execution of
               the OPEN statement, the record pointed to by the current record
              pointer is made available.
</para>
              </listitem>
              <listitem>
                <para>
             If the current record pointer was positioned by the execution of a
               previous READ statement, the current record pointer is updated to
               point to the next existing record in the file and then that record
               is made available.
</para>
              </listitem>
            </orderedlist>
          </listitem>
          <listitem>
            <para>
The execution of the READ statement causes the value of the FILE STATUS
data item, if any, associated with file-name to be updated.
(See <xref linkend="sec5.i.o"/> in this Chapter)
</para>
          </listitem>
          <listitem>
            <para>
       Regardless of the method used to overlap access time with processing
         time, the concept of the READ statement is unchanged in that a record
         is available to the object program prior to the execution of any
         statement following the READ statement.
</para>
          </listitem>
          <listitem>
            <para>
       When the logical records of a file are described with more than one
         record description, these records automatically share the same storage
         area; this is equivalent to an implicit redefinition of the area. The
          contents of any data items which lie beyond the range of the current
          data record are undefined at the completion of the execution of the
         READ statement.
</para>
          </listitem>
          <listitem>
            <para>
   If the INTO phrase is specified, the record being read is moved from
     the record area to the area specified by identifier according to the
     rules specified for the MOVE statement. The implied MOVE does not
     occur if the execution of the READ statement was unsuccessful. Any
     subscripting or indexing associated with identifier is evaluated after
     the record has been read and immediately before it is moved to the data item.
</para>
          </listitem>
          <listitem>
            <para>
When the INTO phrase is used, the record being read is available in
both the input record area and the data area associated with identifier.
</para>
          </listitem>
          <listitem>
            <para>
If, at the time of execution of a READ statement, the position of
current record pointer for that file is undefined, the execution of
that READ statement is unsuccessful.
</para>
          </listitem>
          <listitem>
            <para>
If the end of a reel or unit is recognized during the execution of a
READ statement, an end-of-file status condition exists.
</para>
            <orderedlist>
              <listitem>
                <para>
The standard ending reel/unit label procedure.
</para>
              </listitem>
              <listitem>
                <para>
A reel/unit swap.
</para>
              </listitem>
              <listitem>
                <para>
The standard beginning reel/unit label procedure.
</para>
              </listitem>
              <listitem>
                <para>
The first data record of the new reel/unit is made available.
</para>
              </listitem>
            </orderedlist>
          </listitem>
          <listitem>
            <para>
If, at the time of the execution of a READ statement, no next logical
record exists in the file, the AT END condition occurs, and the
execution of the READ statement is considered unsuccessful. (See <xref linkend="sec5.i.o"/>).
</para>
          </listitem>
          <listitem>
            <para>
When the AT END condition is recognized the following actions are taken in the specified order:
</para>
            <orderedlist>
              <listitem>
                <para>
A value is placed into the FILE STATUS data item, if specified for
this file, to indicate an AT END condition. (See <xref linkend="sec5.i.o"/>).
</para>
              </listitem>
              <listitem>
                <para>
If the AT END phrase is specified in the statement causing the
condition, control is transferred to the AT END
imperative-statement. Any USE procedure specified for this file is not executed.
</para>
              </listitem>
              <listitem>
                <para>
If the AT END phrase is not specified, then a USE procedure must
be specified, either explicitly or implicitly, for this file and
that procedure is executed.
</para>
                <para>
When the AT END condition occurs, execution of the input-output
statement which caused the condition is unsuccessful.
</para>
              </listitem>
            </orderedlist>
          </listitem>
          <listitem>
            <para>
Following the unsuccessful execution of any READ statement, the
contents of the associated record area and the position of the current
record pointer are undefined.
</para>
          </listitem>
          <listitem>
            <para>
When the AT END condition has been recognized, a READ statement for
that file must not be executed without first executing a successful
CLOSE statement followed by the execution of a successful OPEN
statement for that file.
</para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section>
      <title>THE REWRITE STATEMENT</title>
      <indexterm>
        <primary>REWRITE Statement</primary>
      </indexterm>
      <indexterm>
        <primary>Statement, REWRITE</primary>
      </indexterm>
      <section>
        <title>Function</title>
        <para>
      The REWRITE statement logically replaces a record existing in a disk file.
</para>
      </section>
      <section>
        <title>General Format</title>
        <cmdsynopsis>
          <command>REWRITE</command>
          <arg>record-name</arg>
          <arg choice="opt">FROM identifier</arg>
        </cmdsynopsis>
      </section>
      <section>
        <title>Syntax Rules</title>
        <orderedlist>
          <listitem>
            <para>
Record-name and identifier must not refer to the same storage area.
</para>
          </listitem>
          <listitem>
            <para>
Record-name is the name of a logical record in the File Section of the
Data Division and may be qualified.
</para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>General Rules</title>
        <orderedlist>
          <listitem>
            <para>
The file associated with record-name must be a disk file and must be
open in the I-O mode at the time of execution of this statement.
(See THE OPEN STATEMENT in this Chapter).
</para>
          </listitem>
          <listitem>
            <para>
The last input-output statement executed for the associated file prior
to the execution of the REWRITE statement must have been a successfully
executed READ statement. The operating system logically replaces the
record that was accessed by the READ statement.
</para>
          </listitem>
          <listitem>
            <para>
The number of character positions in the record referenced by
record-name must be equal to the number of character positions in the
record being replaced.
</para>
          </listitem>
          <listitem>
            <para>
The logical record released by a successful execution of the REWRITE
statement is no longer available in the record area,
</para>
          </listitem>
          <listitem>
            <para>
The execution of a REWRITE statement with the FROM phrase is equivalent to the execution of:
</para>
            <programlisting>
                      MOVE identifier TO record-name
</programlisting>
            <para>
followed by the execution of the same REWRITE statement without the
FROM phrase. The contents of the record area prior to the execution of
the implicit MOVE statement have no effect on the execution of the
REWRITE statement.
</para>
          </listitem>
          <listitem>
            <para>
The current record pointer is not affected by the execution of a REWRITE statement.
</para>
          </listitem>
          <listitem>
            <para>
The execution of the REWRITE statement causes the value of the FILE
STATUS data item, if any, associated with the file to be updated.
(See <xref linkend="sec5.i.o"/> in this Chapter).
</para>
          </listitem>
          <listitem>
            <para>
The REWRITE statement cannot be used with line sequential files.
    </para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section>
      <title>THE USE STATEMENT</title>
      <indexterm>
        <primary>USE Statement</primary>
      </indexterm>
      <indexterm>
        <primary>Statement, USE</primary>
      </indexterm>
      <section>
        <title>Function</title>
        <para>
The USE statement specifies procedures for input-output error handling
that are in addition to the standard procedures provided by the input-output
control system.
</para>
      </section>
      <section>
        <title>General Format</title>
        <cmdsynopsis>
          <arg choice="plain">USE AFTER STANDARD</arg>
          <group choice="req">
            <arg choice="plain">EXCEPTION</arg>
            <arg choice="plain">ERROR</arg>
          </group>
          <arg choice="plain">PROCEDURE ON</arg>
          <group choice="req">
            <arg choice="plain">
              <replaceable>file-name-1</replaceable>
            </arg>
            <arg choice="plain">INPUT</arg>
            <arg choice="plain">OUTPUT</arg>
            <arg choice="plain">I-O</arg>
            <arg choice="plain">EXTEND</arg>
          </group>
        </cmdsynopsis>
      </section>
      <section>
        <title>Syntax Rules</title>
        <orderedlist>
          <listitem>
            <para>
A USE statement, when present, must immediately follow a section header
in the declaratives section and must be followed by a period followed
by a space. The remainder of the section must consist of zero, one or
more procedural paragraphs that define the procedure to be used.
</para>
          </listitem>
          <listitem>
            <para>
The USE statement itself is never executed; it merely defines the
conditions calling for the execution of the USE procedures.
</para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>General Rules</title>
        <orderedlist>
          <listitem>
            <para>
If the AT END phase has not been specified in the input-output
statement, the designated procedures are executed by the input-output
system after completing the standard input-output error routine upon
recognition of the AT END condition
</para>
          </listitem>
          <listitem>
            <para>
After execution of a USE procedure, control is returned to the invoking routine.
</para>
          </listitem>
          <listitem>
            <para>
Within a USE procedure, there must not be any reference to any
non-declarative procedures. Conversely, in the nondeclarative portion
there must be no reference to procedure-names that appear in the
declarative portion, except that PERFORM statements may refer to a USE
statement or to the procedures associated with such a USE statement.
</para>
          </listitem>
          <listitem>
            <para>
Within a USE procedure, there must not be the execution of any statement
that would cause the execution of a USE procedure that had
previously been invoked and had not yet returned control to the
invoking routine.
</para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section>
      <title>THE WRITE STATEMENT</title>
      <indexterm>
        <primary>WRITE Statement</primary>
      </indexterm>
      <indexterm>
        <primary>Statement, WRITE</primary>
      </indexterm>
      <section>
        <title>Function</title>
        <para>
The WRITE statement releases a logical record for an output file. It
can also be used for vertical positioning of lines within a logical page.
</para>
      </section>
      <section>
        <title>General Format</title>
        <cmdsynopsis>
          <command>WRITE</command>
          <arg>record-name</arg>
          <arg choice="opt">FROM identifier-1</arg>
          <arg choice="opt">
            <group>
              <arg>BEFORE</arg>
              <arg>AFTER</arg>
            </group>
            <arg>ADVANCING</arg>
            <group>
              <arg>integer <group><arg>LINE</arg><arg>LINES</arg></group></arg>
              <arg>TAB</arg>
              <arg>PAGE</arg>
            </group>
          </arg>
        </cmdsynopsis>
      </section>
      <section>
        <title>Syntax Rules</title>
        <orderedlist>
          <listitem>
            <para>
Record-name and identifier-1 must not reference the same storage area.
</para>
          </listitem>
          <listitem>
            <para>
              <phrase role="extension">When TAB is specified the result is to cause the paper to throw to the
standard vertical tabulation position.</phrase>
            </para>
          </listitem>
          <listitem>
            <para>
The record-name is the name of a logical record in the File Section cf the Data Division.
</para>
          </listitem>
          <listitem>
            <para>
Integer may be zero.
</para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>General Rules</title>
        <orderedlist>
          <listitem>
            <para>
The associated file must be open in the OUTPUT mode at the time of the
execution of this statement. (See THE OPEN STATEMENT in this Chapter).
          </para>
          </listitem>
          <listitem>
            <para>
The logical record released by the execution of the WRITE statement is
no longer available in the record area unless the execution of the
WRITE statement was unsuccessful due to a boundary violation.
          </para>
          </listitem>
          <listitem>
            <para>
The results of the execution of the WRITE statement with the FROM
phrase is equivalent to the execution of:
      </para>
            <orderedlist>
              <listitem>
                <para>
          The statement:
          </para>
                <programlisting>
             MOVE identifier-1 TO record-name
          </programlisting>
                <para>
             according to the rules specified for the MOVE statement, followed by:
          </para>
              </listitem>
              <listitem>
                <para>
         The same WRITE statement without the FROM phrase.
         </para>
                <para>
The contents of the record area prior to the execution of the
implicit MOVE statement have no effect on the execution of this WRITE statement.
</para>
                <para>
After execution of the WRITE statement is complete, the
information in the area referenced by identifier-1 is available,
even though the information in the area referenced by record-name may not be.    (See general rule 2.)
 </para>
              </listitem>
            </orderedlist>
          </listitem>
          <listitem>
            <para>
The current record pointer is unaffected by the execution of a WRITE statement.
          </para>
          </listitem>
          <listitem>
            <para>
The execution of the WRITE statement causes the value of the FILE
STATUS data item, if any, associated with the file to be updated.
(See <xref linkend="sec5.i.o"/> in this Chapter).
          </para>
          </listitem>
          <listitem>
            <para>
The maximum record size for a file is established at the time the file
   is created and must not subsequently be changed.
          </para>
          </listitem>
          <listitem>
            <para>
The number of character positions on a disk required to store a logical
record in a file may or may not be equal to the number of character
positions defined by the logical description of that record in the program.
          </para>
          </listitem>
          <listitem>
            <para>
The execution of the WRITE statement releases a logical record to the operating system.
          </para>
          </listitem>
          <listitem>
            <para>
The ADVANCING phrase allows control of the vertical positioning of each
line on a representation of a printed page.
   </para>
            <orderedlist>
              <listitem>
                <para>
With ORGANIZATION SEQUENTIAL if the ADVANCING phrase is not used,
automatic advancing is provided when output is directed to a
list-device to act as if the user had specified AFTER
ADVANCING 1 LINE. If the ADVANCING phrase is used, advancing is
provided as follows:
         </para>
                <orderedlist>
                  <listitem>
                    <para>
If integer is specified, the representation of the printed
page is advanced the number of lines equal to the value of integer.
          </para>
                  </listitem>
                  <listitem>
                    <para>
If the BEFORE phrase is used, the line is presented before
the representation of the printed page is advanced.
          </para>
                  </listitem>
                  <listitem>
                    <para>
If the AFTER phrase is used, the line is presented after the
representation of the printed page is advanced.
          </para>
                  </listitem>
                  <listitem>
                    <para>
If PAGE is specified, the record is presented on the logical
page before or after (depending on the phrase used) the
device is repositioned to the next logical page.
          </para>
                  </listitem>
                </orderedlist>
              </listitem>
              <listitem>
                <para>
With ORGANIZATION LINE SEQUENTIAL, if the ADVANCING phrase is not used,
automatic advancing of one line is provided to act in accordance with
the convention of your operating system text editor (usually as if the user
had specified BEFORE ADVANCING 1 LINE).
          </para>
                <para>
If the ADVANCING phrase is used, advancing is provided according to rules 9a(i) through 9a(iv) above.
</para>
                <para>
If the ADVANCING phrase is used or the output is directed to a
list device, the resulting file is restricted in its use.
general, the file cannot be read to automatically retrieve the
logical records written. In particular, if the BEFORE ADVANCING
and AFTER ADVANCING clauses are both used (implicitly or
explicitly) when writing the file, it may not be opened as an
input file with ORGANIZATION LINE SEQUENTIAL.
          </para>
              </listitem>
            </orderedlist>
          </listitem>
          <listitem>
            <para>
When an attempt is made to write beyond the externally defined
boundaries of a sequential file, an exception condition exists and the
contents of the record area are unaffected. The following action takes place:
              </para>
            <orderedlist>
              <listitem>
                <para>
The value of the FILE STATUS data item, if any, of the associated
file is set to a value indicating a boundary violation.
(See <xref linkend="sec5.i.o"/> in this Chapter).
          </para>
              </listitem>
              <listitem>
                <para>
If a USE AFTER STANDARD EXCEPTION declarative is explicitly or
implicitly specified for the file, that declarative procedure will
then be executed.
          </para>
              </listitem>
              <listitem>
                <para>
If a USE AFTER STANDARD EXCEPTION declarative is not explicitly or
implicitly specified for the file, the result is undefined.
</para>
              </listitem>
            </orderedlist>
          </listitem>
        </orderedlist>
      </section>
    </section>
  </section>
</chapter>
