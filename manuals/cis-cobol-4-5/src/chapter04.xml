<?xml version="1.0"?>
<chapter xmlns="http://docbook.org/ns/docbook">
  <title>TABLE HANDLING</title>
      <indexterm>
        <primary>Table Handling</primary>
      </indexterm>
  <section>
    <title>INTRODUCTION TO THE TABLE HANDLING MODULE</title>
    <para>
The Table Handling module provides a capability for defining tables of
contiguous data items and accessing an item relative to its position in the
table. Language facilities are provided for specifying how many times an
item is to be repeated. Each item may be identified through use of a
subscript or an index (see Chapter 2).
</para>
    <para>
Table Handling provides a capability for accessing items in variable
length. tables of multiple dimensions. The maximum number of multiple
dimensions <phrase role="extension">if the ANSI switch is on (see Chapter 2)</phrase> is restricted to three.
</para>
  </section>
  <section>
    <title>DATA DIVISION IN THE TABLE HANDLING MODULE</title>
    <section>
      <title>THE OCCURS CLAUSE</title>
      <indexterm>
        <primary>OCCURS Clause</primary>
      </indexterm>
      <indexterm>
        <primary>Clause, OCCURS</primary>
      </indexterm>
      <indexterm>
        <primary>Table Handling, Data Division in</primary>
      </indexterm>
      <section>
        <title>Function</title>
        <para>
The OCCURS clause eliminates the need for separate entries for repeated
data items and supplies information required for the application of
subscripts or indices.
</para>
      </section>
      <section>
        <title>General Format</title>
        <cmdsynopsis>
          <arg>OCCURS</arg>
          <arg>integer-2</arg>
          <arg>TIMES</arg>
          <arg choice="opt" rep="repeat">INDEXED BY index-name-1 <arg choice="opt" rep="repeat">, index-name-2</arg></arg>
        </cmdsynopsis>
      </section>
      <section>
        <title>Syntax Rules</title>
        <orderedlist>
          <listitem>
            <para>
An INDEXED BY phrase is required if the subject of this entry, or an
      entry subordinate to this entry, is to be referred to by indexing. The
      index-name identified by this clause is not defined elsewhere since its
      allocation and format are dependent on the hardware, and not being
      data, cannot be associated with any data hierarchy.
</para>
          </listitem>
          <listitem>
            <para>
The OCCURS clause cannot be specified in a data description entry that
has 01 or 77 level-number <phrase role="extension">(if ANSI switch has been set).</phrase>
</para>
          </listitem>
          <listitem>
            <para>
Index-name-1, index-name-2, ... must be unique words within the program.
</para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>General Rules</title>
        <orderedlist>
          <listitem>
            <para>
The OCCURS clause is used in defining tables and other homogeneous sets
of repeated data items. Whenever the OCCURS clause is used, the
data-name which is the subject of this entry must be either subscripted
or indexed whenever it is referred to in a statement other than USE FOR
DEBUGGING. Further, if the subject of this entry is the name of a
group item, then all data-names belonging to the group must be
subscripted or indexed whenever they are used as operands, except as
the object of a REDEFINES clause.
(See under headings Subscripting, Indexing and Identifier in Chapter 2).
</para>
          </listitem>
          <listitem>
            <para>
Except for the OCCURS clause itself, all data description clauses
associated with an item whose description includes an OCCURS clause
apply to each occurrence of the item described.
(See restriction in general rule 2 under Data Description Entries Other Than Condition in Chapter 3).
</para>
          </listitem>
          <listitem>
            <para>
The number of occurrences of the subject entry is defined as the value
of integer-2 representing the exact number of occurrences.
 </para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section>
      <title>THE USAGE CLAUSE</title>
        <indexterm><primary>USAGE Clause</primary></indexterm>
        <indexterm><primary>Clause, USAGE</primary></indexterm>
      <section>
        <title>Function</title>
        <para>
The USAGE clause specifies the format of a data item in the computer storage.
     </para>
      </section>
    </section>
    <section>
      <title>General Format</title>
      <cmdsynopsis>
        <arg choice="opt">USAGE IS</arg>
        <arg>INDEX</arg>
      </cmdsynopsis>
    </section>
    <section>
      <title>Syntax Rules</title>
      <orderedlist>
        <listitem>
          <para>
An index data item can be referenced explicitly only in a SET statement, a relation condition,
the USING phrase of a Procedure Division header, or the USING phrase of a CALL statement.
</para>
        </listitem>
        <listitem>
          <para>
The SYNCHRONIZED, JUSTIFIED, PICTURE, VALUE and BLANK WHEN ZERO clauses
cannot be used to describe group or elementary items described with the
USAGE IS INDEX clause.
</para>
        </listitem>
      </orderedlist>
    </section>
    <section>
      <title>General Rules</title>
      <orderedlist>
        <listitem>
          <para>
The USAGE clause can be written at any level. If the USAGE clause is
written at a group level, it applies to each elementary item in the
group. The USAGE clause of an elementary item cannot contradict the
USAGE clause of a group to which the item belongs.
</para>
        </listitem>
        <listitem>
          <para>
An elementary item described with the USAGE IS INDEX clause is called
an index data item and contains a value which must correspond to an
occurrence number of a table element. The elementary item cannot be a
conditional variable. The compiler will allocate a 2 byte binary field
with an implied picture of 9(4) COMPUTATIONAL. If a group item is
described with the USAGE IS INDEX clause the elementary items in the
group are all index data items. The group itself is not an index data
item and cannot be used :n the SET statement or in a relation condition.
</para>
        </listitem>
        <listitem>
          <para>
An index data item can be part of a group which is referred to in a
MOVE or input-output statement, in which case no conversion will take place.
</para>
        </listitem>
      </orderedlist>
    </section>
  </section>
  <section>
    <title>PROCEDURE DIVISION IN THE TABLE HANDLING MODULE</title>
      <indexterm>
        <primary>Table Handling, Procedure Division in</primary>
      </indexterm>
    <section>
      <title>RELATION CONDITION</title>
      <indexterm>
        <primary>Relation Condition, Table</primary>
      </indexterm>
      <section>
        <title>Comparisons Involving Index-Names And/or Index Data Items</title>
      <indexterm>
        <primary>Comparison Involving Index-Names</primary>
      </indexterm>
    <indexterm>
      <primary>Index-Names</primary>
    </indexterm>
    <indexterm>
      <primary>Index Data Items</primary>
    </indexterm>

        <para>
Relation tests may be made between the following data items:
</para>
        <itemizedlist>
          <listitem>
            <para>
Two index-names. The result is the same as if the corresponding
occurrence numbers were compared.
</para>
          </listitem>
          <listitem>
            <para>
An index-name and a data item (other than an index data item) or
literal. The occurrence number that corresponds to the value of
the index-name is compared to the data item or literal.
</para>
          </listitem>
          <listitem>
            <para>
An index data item and an index-name or another index data item.
The actual values are compared without conversion.
</para>
          </listitem>
          <listitem>
            <para>
The result of the comparison of an index data item with any data
item or literal not specified above is undefined.
</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section>
      <title>OVERLAPPING OPERANDS</title>
      <indexterm>
        <primary>Overlapping Operands</primary>
      </indexterm>
        <indexterm>
          <primary>Operand, Overlapping</primary>
        </indexterm>
      <para>
When a sending and a receiving item in a SET statement share a part of
their storage areas, the result of the execution of such a statement is undefined.
</para>
    </section>
    <section>
      <title>THE SET STATEMENT</title>
      <indexterm>
        <primary>SET Statement</primary>
      </indexterm>
      <indexterm>
        <primary>Statement, SET</primary>
      </indexterm>
      <section>
        <title>Function</title>
        <para>
The SET statement establishes reference points for table handling
operations by setting index-names associated with table elements.
</para>
      </section>
      <section>
        <title>General Format</title>
        <para>
     Format 1
        </para>
        <cmdsynopsis>
          <command>SET</command>
          <group choice="req">
            <arg>
              <arg>identifier-1</arg>
              <arg choice="opt" rep="repeat">, identifier-2</arg>
            </arg>
            <arg>
              <arg>index-name-1</arg>
              <arg choice="opt" rep="repeat">, index-name-2</arg>
            </arg>
          </group>
          <arg>TO</arg>
          <group choice="req">
            <arg>identifier-3</arg>
            <arg>index-name-3</arg>
            <arg>integer-1</arg>
          </group>
        </cmdsynopsis>
        <para>
     Format 2
        </para>
        <cmdsynopsis>
          <command>SET</command>
          <arg>index-name-4</arg>
          <arg choice="opt" rep="repeat">, index-name-5</arg>
          <group choice="req">
            <arg>UP BY</arg>
            <arg>DOWN BY</arg>
          </group>
          <group choice="req">
            <arg>identifier-4</arg>
            <arg>integer-2</arg>
          </group>
        </cmdsynopsis>
      </section>
      <section>
        <title>Syntax Rules</title>
        <orderedlist>
          <listitem>
            <para>
All references to index-name-1, identifier-1, and index-name-4 apply
equally to index-name-2, identifier-2, and index-name-5, respectively.
</para>
          </listitem>
          <listitem>
            <para>
Identifier-1 and identifier-3 must name either index data items, or
elementary items described as an integer.
</para>
          </listitem>
          <listitem>
            <para>
Identifier-4 must be described as an elementary numeric integer.
</para>
          </listitem>
          <listitem>
            <para>
Integer-1 and integer-2 may be signed. Integer-1 must be positive.
</para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>General Rules</title>
        <orderedlist>
          <listitem>
            <para>
Index-names are considered related to a given table and are defined by
being specified in the INDEXED BY clause.
</para>
          </listitem>
          <listitem>
            <para>
If index-name-3 is specified, the value of the index before the
execution of the SET statement must correspond to an occurrence number
of an element in the associated table.
</para>
            <para>
If index-name-4, index-name-5 is specified, the value of the index both
before and after the execution of the SET statement must correspond to an
occurrence number of an element in the associated table  If index-name-1,
index-name-2 is specified, the value of the index after the execution of the
SET statement must correspond to an occurrence number of an element in the
associated table. The value of the index associated with an index-name
after the execution of a PERFORM statement may be undefined.
(See THE PERFORM STATEMENT in Chapter 3).
</para>
          </listitem>
          <listitem>
            <para>
In Format 1, the following action occurs:
</para>
            <orderedlist>
              <listitem>
                <para>
Index-name-1 is set to a value causing it to refer to the table
element that corresponds in occurrence number to the table element
referenced by index-name-3, identifier-3, or integer-1. If
identifier-3 is an index data item, or if index-name-3 is related
to the same table as index-name-1, no conversion takes place.
</para>
              </listitem>
              <listitem>
                <para>
If identifier-1 is an index data item, it may be set equal to
either the contents of index-name-3 or identifier-3 where
identifier-3 is also an index item; no conversion takes place in
either case.
</para>
              </listitem>
              <listitem>
                <para>
If identifier-1 is not an index data item, it may be set only to
an occurrence number that corresponds to the value of
index-name-3. Neither identifier-3 nor integer-1 can be used in this case.
</para>
              </listitem>
              <listitem>
                <para>
The process is repeated for index-name-2 , identifier-2, etc., if
specified. Each time the value of index-name-3 or identifier-3 is
used as it was at the beginning of the execution of the statement.
Any subscripting or indexing associated with identifier-1, etc.,
is evaluated immediately before the value of the respective data
item is changed.
</para>
              </listitem>
            </orderedlist>
          </listitem>
          <listitem>
            <para>
In Format 2, the contents of index-name-4 are incremented (UP BY) or
decremented (DOWN BY) by a value that corresponds to the number of
occurrences represented by the value of integer-2 or identifier-4;
thereafter, the process is repeated for index-name-5, etc. Each time
the value of identifier-4 is used as it was at the beginning of the
execution of the statement.
</para>
          </listitem>
          <listitem>
            <para>
Data in Table 4-1 represents the validity of various operand
combinations in the SET statement. The general rule reference
indicates the applicable general rule.
</para>
          </listitem>
        </orderedlist>
        <table frame="all" colsep="1" rowsep="1">
          <title>SET Statement Valid Operand Combinations.</title>
          <tgroup cols="4">
            <colspec colname="c1"/>
            <colspec colname="c2"/>
            <colspec colname="c3"/>
            <colspec colname="c4"/>
            <tbody>
              <row>
                <entry morerows="1">Sending Item</entry>
                <entry namest="c2" nameend="c4">Receiving Item<superscript>1</superscript></entry>
              </row>
              <row>
                <entry>Integer Data Item</entry>
                <entry>Index-Name</entry>
                <entry>Index Data Item</entry>
              </row>
              <row>
                <entry>Integer Literal</entry>
                <entry>No/3c</entry>
                <entry>Valid/3a</entry>
                <entry>No/3b</entry>
              </row>
              <row>
                <entry>Integer Data Item</entry>
                <entry>No/3c</entry>
                <entry>Valid/3a</entry>
                <entry>No/3b</entry>
              </row>
              <row>
                <entry>Index-Name</entry>
                <entry>Valid/3c</entry>
                <entry>Valid/3a</entry>
                <entry>Valid/3b<superscript>2</superscript></entry>
              </row>
              <row>
                <entry>Index Data Item</entry>
                <entry>No/3c</entry>
                <entry>Valid/3a<superscript>2</superscript></entry>
                <entry>Valid/3b<superscript>2</superscript></entry>
              </row>
              <row>
                <entry namest="c1" nameend="c4">
                  <para>
   1 = Rule numbers under General Rules above are referred to.
   </para>
                  <para>
   2 = No conversion takes place
   </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>
  </section>
</chapter>
