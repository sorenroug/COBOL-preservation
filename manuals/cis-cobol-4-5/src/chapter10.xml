<?xml version="1.0"?>
<chapter xmlns="http://docbook.org/ns/docbook">
  <title>DEBUG AND INTERACTIVE DEBUGGING</title>
  <indexterm>
    <primary>Debug</primary>
  </indexterm>
  <section>
    <title>INTRODUCTION</title>
    <para>
Standard ANSI COBOL debugging provides a means by which the user can
describe the conditions under which procedures are to be
monitored during the execution of the object program.
       </para>
    <para role="extension">
      <phrase role="extension">The CIS COBOL Run-Time Debug Package is an extension to ANSI COBOL that
provides break-point facilities in the user's program. Programs may be run
from the start until a specified break-point is reached, when control is
passed back to the user. At this point, data areas may be inspected or changed.</phrase>
    </para>
  </section>
  <section>
    <title>CIS COBOL RUN-TIME DEBUG EXTENSION</title>
    <indexterm>
      <primary>DEBUG, Run Time</primary>
    </indexterm>
    <indexterm>
      <primary>Run Time Debug</primary>
    </indexterm>
    <para role="extension">
      <phrase role="extension">The Run-Time debug is entered as an option by the user and the user
program is then tested line by line, paragraph by paragraph and so on as
required. The commands to the package can reference procedure statements
and data areas by means of a 4-digit hexadecimal code output by the compiler
against each line of the compilation listing. Powerful macros of commands
can be used to give very sophisticated debugging facilities. The precise
details for using the package vary according to the host operating system,
and are therefore contained in the <citetitle pubwork="book">CIS COBOL Operating Guide</citetitle>
for your Operating System.</phrase>
    </para>
  </section>
  <section>
    <title>STANDARD ANSI COBOL DEBUG</title>
    <para>
The decisions of what to monitor and what information to display are
explicitly in the domain of the user. The COBOL Debug facility simply
provides a convenient access to pertinent information.
        </para>
    <para>
The features of the language that support the COBOL Debug module are:
        </para>
    <itemizedlist>
      <listitem>
        <para>
A compile time switch -- WITH DEBUGGING MODE.
        </para>
      </listitem>
      <listitem>
        <para>
An object time switch.
        </para>
      </listitem>
      <listitem>
        <para>
A USE FOR DEBUGGING statement.
        </para>
      </listitem>
      <listitem>
        <para>
A special register -- DEBUG-ITEM.
        </para>
      </listitem>
      <listitem>
        <para>
Debugging lines.
        </para>
      </listitem>
    </itemizedlist>
    <para>
The reserved word DEBUG-ITEM is the name for a special register generated
automatically by the compiler that supports the debugging facility. Only
one DEBUG-ITEM is allocated per program. The names of the subordinate data
items in DEBUG-ITEM are also reserved words.
        </para>
    <section>
      <title>COMPILE TIME SWITCH</title>
      <indexterm>
        <primary>Compile Time Debug Switch</primary>
      </indexterm>
      <indexterm>
        <primary>Switch, Compile Time Debug</primary>
      </indexterm>
      <para>
The DEBUGGING MODE clause is written as part of the SOURCE-COMPUTER
paragraph in the Environment Division. It serves as a compile-time switch
over debugging statements written in the program.
</para>
      <para>
When DEBUGGING MODE is not specified in a program, all the debugging lines
are compiled as if they were comment lines and their syntax is not checked.
</para>
    </section>
    <section>
      <title>COBOL DEBUG OBJECT TIME SWITCH</title>
      <indexterm>
        <primary>OBJECT Time DEBUG Switch</primary>
      </indexterm>
      <indexterm>
        <primary>DEBUG, Object Time Switch</primary>
      </indexterm>
      <para>
An object time switch dynamically activates the debugging code inserted by
the compiler. This switch cannot be addressed in the program; it is
controlled outside the COBOL environment. If the switch is 'on', the
effects of any USE FOR DEBUGGING statements written in the source program
are permitted. If the switch is 'off', all the effects described in the USE
FOR DEBUGGING Statement, are inhibited. Recompilation of the source program
is not required to provide or take away this facility.
</para>
      <para>
The object time switch has no effect on the execution of the object program
if the WITH DEBUGGING MODE clause was not specified in the source program at
compile time.
The switch is described in the <citetitle pubwork="book">CIS COBOL Operating Guide</citetitle>.
</para>
    </section>
    <section>
      <title>ENVIRONMENT DIVISION IN COBOL DEBUG</title>
      <indexterm>
        <primary>Environment Division in COBOL DEBUG</primary>
      </indexterm>
      <indexterm>
        <primary>DEBUG, Environment</primary>
      </indexterm>
      <section>
        <title>The WITH DEBUGGING MODE Clause</title>
        <indexterm>
          <primary>WITH DEBUGGING MODE Clause</primary>
        </indexterm>
        <indexterm>
          <primary>Clause, WITH DEBUGGING MODE</primary>
        </indexterm>
        <section>
          <title>Function</title>
          <para>
The WITH DEBUGGING MODE clause indicates that all debugging sections and all
debugging lines are to be compiled. If this clause is not specified, all
debugging lines and sections are compiled as if they were comment lines.
</para>
        </section>
        <section>
          <title>General Format</title>
          <cmdsynopsis>
            <command>SOURCE-COMPUTER.</command>
            <arg>computer-name</arg>
            <arg choice="opt">WITH DEBUGGING MODE</arg>
            <arg>.</arg>
          </cmdsynopsis>
        </section>
        <section>
          <title>General Rules</title>
          <orderedlist>
            <listitem>
              <para>
If the WITH DEBUGGING MODE clause is specified in the SOURCE-COMPUTER
paragraph of the Configuration Section, of a program, all USE FOR
DEBUGGING statements and all debugging lines are compiled.
            </para>
            </listitem>
            <listitem>
              <para>
If the WITH DEBUGGING MODE clause is not specified in the
SOURCE-COMPUTER paragraph of the Configuration Section of a program,
any USE FOR DEBUGGING statements and all associated debugging sections,
and any debugging lines are compiled as if they were comment lines.
</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
    </section>
    <section>
      <title>PROCEDURE DIVISION IN COBOL DEBUG</title>
      <indexterm>
        <primary>Procedure Division in COBOL Debug</primary>
      </indexterm>
      <indexterm>
        <primary>DEBUG, Procedure Division in COBOL</primary>
      </indexterm>
      <section>
        <title>The USE FOR DEBUGGING Statement</title>
        <indexterm>
          <primary>USE FOR DEBUGGING Statement</primary>
        </indexterm>
        <indexterm>
          <primary>Statement, USE FOR DEBUGGING</primary>
        </indexterm>
        <section>
          <title>Function</title>
          <para>
The USE FOR DEBUGGING statement identifies the user items that are to be
monitored by the associated debugging section.
</para>
        </section>
        <section>
          <title>General Format</title>
          <cmdsynopsis>
            <arg>section-name SECTION</arg>
            <arg choice="opt">segment number</arg>
            <arg>.</arg>
            <arg>USE FOR DEBUGGING ON</arg>
            <group choice="req">
              <arg>procedure-name-1</arg>
              <arg>ALL PROCEDURES</arg>
            </group>
            <arg choice="opt">
              <arg>,</arg>
              <group choice="req" rep="repeat">
                <arg>procedure-name-2</arg>
                <arg>ALL PROCEDURES</arg>
              </group>
            </arg>
          </cmdsynopsis>
        </section>
        <section>
          <title>Syntax Rules</title>
          <orderedlist>
            <listitem>
              <para>
Debugging section(s), if specified, must appear together immediately after the DECLARATIVES header.
            </para>
            </listitem>
            <listitem>
              <para>
Except in the USE FOR DEBUGGING statement itself, there must be no reference to any non-declarative procedure within the debugging section.
            </para>
            </listitem>
            <listitem>
              <para>
Statements appearing outside of the set of debugging sections must not reference procedure-names defined within the set of debugging sections.
            </para>
            </listitem>
            <listitem>
              <para>
Except for the USE FOR DEBUGGING statement itself, statements appearing
within a given debugging section may reference procedure-names defined
within a different USE procedure only with a PERFORM statement.
            </para>
            </listitem>
            <listitem>
              <para>
Procedure-names defined within debugging sections must not appear
within USE FOR DEBUGGING statements.
            </para>
            </listitem>
            <listitem>
              <para>
Any given procedure-name may appear in only one USE FOR DEBUGGING
statement and may appear only once in that statement.
            </para>
            </listitem>
            <listitem>
              <para>
The ALL PROCEDURES phrase can appear only once in a program.
            </para>
            </listitem>
            <listitem>
              <para>
When the ALL PROCEDURES phrase is specified, procedure-name-1,
procedure-name-2, ... must not be specified in any USE FOR DEBUGGING statement.
            </para>
            </listitem>
            <listitem>
              <para>
References to the special register DEBUG-ITEM are restricted to references from within a debugging section.
</para>
            </listitem>
          </orderedlist>
        </section>
        <section>
          <title>General Rules</title>
          <orderedlist>
            <listitem>
              <para>
In the following general rules all references to procedure-name-1, apply equally to procedure-name-2.
</para>
            </listitem>
            <listitem>
              <para>
Automatic execution of a debugging section is not caused by a statement appearing in a debugging section.
</para>
            </listitem>
            <listitem>
              <para>
When procedure-name-1 is specified in a USE FOR DEBUGGING statement that debugging section is executed:
</para>
              <orderedlist numeration="loweralpha" spacing="compact">
                <listitem>
                  <para>
Immediately before each execution of the named procedure;
</para>
                </listitem>
                <listitem>
                  <para>
Immediately after the execution of an ALTER statement which references procedure-name-1.
</para>
                </listitem>
              </orderedlist>
            </listitem>
            <listitem>
              <para>
The ALL PROCEDURES phrase causes the effects described in general
rule 3 to occur for every procedure-name in the program, except those
appearing within a debugging section.
</para>
            </listitem>
            <listitem>
              <para>
The associated debugging section is not executed.for a specific operand
more than once as a result of the execution of a single statement,
regardless of the number of times that operand is explicitly specified.
In the case of a PERFORM statement which caused iterative execution of
a referenced procedure, the associated debugging section is executed
once for each iteration.
   </para>
              <para>
Within an imperative statement, each individual occurrence of an
imperative verb identifies a separate statement for the purpose of debugging.
</para>
            </listitem>
            <listitem>
              <para>
A reference to procedure-name-1 as a qualifier does not constitute
reference to that item for the debugging described in the general rules above.
</para>
            </listitem>
            <listitem>
              <para>
Associated with each execution of a debugging section is the special
register DEBUG-ITEM, which provides information about the conditions
that caused the execution of a debugging section. DEBUG-ITEM has the
following implicit description:
</para>
              <programlisting>
01 DEBUG-ITEM.
   02   DEBUG-LINE      PICTURE IS X(6).
   02   FILLER          PICTURE IS X VALUE SPACE.
   02   DEBUG-NAME      PICTURE IS X(30).
   02   FILLER          PICTURE IS X(19) VALUE SPACE.
   02   DEBUG-CONTENTS  PICTURE IS X(n).
</programlisting>
            </listitem>
            <listitem>
              <para>
Prior to each execution of a debugging section, the contents of the
data item referenced by DEBUG-ITEM are space-filled. The contents of
data items subordinate to DEBUG-ITEM are then updated, according to the
following general rules, immediately before control is passed to that
debugging section. The contents of any data item not specified in the
following general rules remains spaces.
</para>
              <para>
Updating is accomplished in accordance with the rules for the MOVE
statement, the sole exception being the move to DEBUG-CONTENTS when the
move is treated exactly as if it was an alphanumeric to alphanumeric
elementary move with no conversion of data from one form of internal
representation to another.
</para>
            </listitem>
            <listitem>
              <para>
The contents of DEBUG-LINE is the relevant COBOL source line number.
This provides the means of identifying a particular source statement.
</para>
            </listitem>
            <listitem>
              <para>
DEBUG-NAME contains the first 30 characters of the name that caused the
debugging section to be executed.
</para>
              <para>
Subscripts/indices, if any, are not entered into DEBUG-NAME.
</para>
            </listitem>
            <listitem>
              <para>
DEBUG-CONTENTS is a data item that is large enough to contain the data
required by the following general rules.
</para>
            </listitem>
            <listitem>
              <para>
f the first execution of the first nondeclarative procedure in the
program causes the debugging section to be executed, the following conditions exist:
            </para>
              <orderedlist numeration="loweralpha" spacing="compact">
                <listitem>
                  <para>
DEBUG-LINE identifies the first statement of that procedure.
</para>
                </listitem>
                <listitem>
                  <para>
DEBUG-NAME contains the name of that procedure.
</para>
                </listitem>
                <listitem>
                  <para>
DEBUG-CONTENTS contains 'START PROGRAM'.
</para>
                </listitem>
              </orderedlist>
            </listitem>
            <listitem>
              <para>
 If a reference to procedure-name-1 in an ALTER statement causes the
       debugging section to be executed, the following conditions exist:
            </para>
              <orderedlist numeration="loweralpha" spacing="compact">
                <listitem>
                  <para>
DEBUG-LINE   identifies the ALTER statement that references procedure-name-1.
</para>
                </listitem>
                <listitem>
                  <para>
DEBUG-NAME contains procedure-name-1.
</para>
                </listitem>
                <listitem>
                  <para>
DEBUG-CONTENTS contains the applicable procedure-name associated with the TO phrase of the ALTER statement.
</para>
                </listitem>
              </orderedlist>
            </listitem>
            <listitem>
              <para>
 If the transfer of control associated with the execution of a GO TO
statement causes the debugging section to be executed, the following conditions exist:
            </para>
              <orderedlist numeration="loweralpha" spacing="compact">
                <listitem>
                  <para>
DEBUG-LINE identifies the GO TO statement whose execution transfers control to procedure-name-1.
</para>
                </listitem>
                <listitem>
                  <para>
DEBUG-NAME contains procedure-name-1.
</para>
                </listitem>
              </orderedlist>
            </listitem>
            <listitem>
              <para>
If the transfer to control from the control mechanism associated with a
PERFORM statement causes the debugging section associated with
procedure-name-1 to be executed, the following conditions exist:
       </para>
              <orderedlist numeration="loweralpha" spacing="compact">
                <listitem>
                  <para>
DEBUG-LINE identifies the PERFORM statement that references procedure-name-1.
</para>
                </listitem>
                <listitem>
                  <para>
DEBUG-NAME contains procedure-name-1.
</para>
                </listitem>
                <listitem>
                  <para>
DEBUG-CONTENTS contains 'PERFORM LOOP'.
</para>
                </listitem>
              </orderedlist>
            </listitem>
            <listitem>
              <para>
If procedure-name-1 is a USE procedure that is to be executed, the
     following conditions exist:
       </para>
              <orderedlist numeration="loweralpha" spacing="compact">
                <listitem>
                  <para>
DEBUG-LINE identifies the statement that causes execution of the USE procedure.
</para>
                </listitem>
                <listitem>
                  <para>
DEBUG-NAME contains procedure-name-1.
</para>
                </listitem>
                <listitem>
                  <para>
DEBUG-CONTENTS contains 'USE PROCEDURE'.
</para>
                </listitem>
              </orderedlist>
            </listitem>
            <listitem>
              <para>
If an implicit transfer of control from the previous sequential
paragraph to procedure-name-1 causes the debugging section to be
executed, the following conditions exist:
       </para>
              <orderedlist numeration="loweralpha" spacing="compact">
                <listitem>
                  <para>
DEBUG-LINE identifies the previous statement.
</para>
                </listitem>
                <listitem>
                  <para>
DEBUG-NAME contains procedure-name-1.
</para>
                </listitem>
                <listitem>
                  <para>
DEBUG-CONTENTS contains 'FALL THROUGH'.
</para>
                </listitem>
              </orderedlist>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section>
        <title>DEBUGGING LINES</title>
        <indexterm>
          <primary>Lines, Debugging</primary>
        </indexterm>
        <para>
A debugging line is any line with a 'D' in the indicator area of the line.
Any debugging line that consists solely of spaces from margin A to margin R
is considered the same as a blank line.
</para>
        <para>
The contents of a debugging line must be such that a syntactically correct
program is formed with or without the debugging lines being considered as
comment lines.
</para>
        <para>
A debugging line will be considered to have all the characteristics of a
comment line, if the WITH DEBUGGING MODE clause is not specified in the
SOURCE-COMPUTER paragraph.
</para>
        <para>
Successive debugging lines are allowed. Continuation of debugging lines is
permitted, except that each continuation line must contain a 'D' in the
indicator area, and character-strings may not be broken across two lines.
</para>
        <para>
A debugging line is only permitted in the program after the OBJECT-COMPUTER
paragraph.
</para>
      </section>
    </section>
  </section>
</chapter>
