<?xml version="1.0"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="ciscobol" xml:lang="en" xsi:schemaLocation="http://docbook.org/xml/5.0/xsd/docbook.xsd">
  <info>
    <title>CIS COBOL Language Reference Manual</title>
    <subtitle>Version 4.5</subtitle>
    <copyright>
      <year>1978</year>
      <year>1980</year>
      <year>1982</year>
      <year>1983</year>
      <holder>Micro Focus Limited</holder>
    </copyright>
    <legalnotice>
      <para>
Neither the whole nor any part of the information contained in, or the
product described in, this manual may be adapted or reproduced in any
material form except with the prior written approval of Acorn Computers
Limited (Acorn Computers).
</para>
      <para>
The product described in this manual and products for use with it are
subject to continuous development and improvement. All information of
a technical nature and particulars of the product and its use (including
the information and particulars in this manual) are given by Acorn
Computers in good faith. However, it is acknowledged that there may be
errors or omissions in this manual. A list of details of any amendments
or revisions to this manual can be obtained upon request from Acorn
Computers Technical Enquiries. Acorn Computers welcome comments and
suggestions relating to the product and this manual.
</para>
      <para>
All correspondence should be addressed to:
<address>Micro Focus Limited
<street>26 West street</street>
<city>Newbury Berkshire</city>
<postcode>RG13 1JT</postcode>
</address>
</para>
      <para>CIS COBOL, LEVEL II COBOL, FORMS-2 ANIMATOR and FILESHARE are trademarks of Micro Focus Ltd</para>
      <para><trademark class="registered">CP/M</trademark> and <trademark class="registered">CP/M-86</trademark> are registered trademarks of Digital Research Inc</para>
      <para><trademark class="registered">Z80</trademark> is a registered trademark of Zilog Inc</para>
      <para><trademark class="trade">ADM-3A</trademark> is a trademark of Lear Siegler Inc</para>
      <para><trademark class="registered">8080</trademark> is a registered trademark of Intel Corp</para>
    </legalnotice>
    <revhistory>
      <revision>
        <revnumber>4.5</revnumber>
        <date>November 1982</date>
      </revision>
    </revhistory>
    <publisher>
      <publishername>Micro Focus Limited</publishername>
    </publisher>
    <subjectset>
      <subject>
        <subjectterm>COBOL</subjectterm>
      </subject>
      <subject>
        <subjectterm>programming language</subjectterm>
      </subject>
      <subject>
        <subjectterm>software</subjectterm>
      </subject>
    </subjectset>
  </info>
  <acknowledgements>
    <para>
COBOL is an industry language and is not the property of any company or
group of companies, or of any organization or group of organizations.
</para>
    <para>
No warranty, expressed or implied, is made by any contributor or by the
CODASYL Programming Language Committee as to the accuracy and functioning of
the programming system and language. Moreover, no responsibility is assumed
by any contributor, or by the committee, in connection herewith.
</para>
    <para>
  The authors and copyright holders of the copyrighted material used herein:
</para>
<itemizedlist mark="none">
<listitem>
    <para>
FLOW-MATIC (Trademark for Sperry Rand Corporation) Programming for the
<trademark class="registered">Univac</trademark> I and II,
Data Automation Systems copyrighted 1958, 1959, by
Sperry Rand Corporation; IBM Commercial Translator Form No. F28-8013,
copyrighted 1959 by IBM; FACT, DSI27A5260-2760, copyrighted 1960 by
Minneapolis-Honeywell.
</para>
</listitem>
</itemizedlist>
    <para>
have specifically authorized the use of this material in whole or in part,
in the COBOL specifications. Such authorization extends to the reproduction
and use of COBOL specifications in programming manuals or similar publications.
</para>
  </acknowledgements>
  <preface>
    <title>PREFACE</title>
    <para>
This manual describes the Compact Interactive Standard COBOL (CIS COBOL)
language for programming microcomputers. CIS COBOL is based on the ANSI
COBOL standard X3.23 (1974) (see Acknowledgement). It also describes the
additional CIS COBOL features that exploit the capabilities of microprocessors.
</para>
    <para>
Each release of CIS COBOL is characterized by a two-digit code in the form of
</para>
    <para>
      "Version number". "Release number within version"
  </para>
    <section>
      <title>AUDIENCE</title>
      <para>
This manual is intended for programmers already familiar with COBOL on other equipment.
</para>
    </section>
    <section>
      <title>MANUAL ORGANIZATION</title>
      <para>
Chapters 1 through 4 of the manual apply to all users and describe basic
features of the language. Chapters 5 through 7 describe language features
for programming the three file organization formats supported: sequential,
relative and indexed.
</para>
      <para>
Chapters 8 through 11 apply to all users and describe additional features
and facilities available with the standard language. The appendices supply
reference information pertinent to all systems.
</para>
      <para>
The manual contains the following chapters and appendices:
</para>
      <para>
"Chapter 1. Introduction", which gives a general description of the
language, including a broad outline of ANSI COBOL features included and
omitted and additional features of CIS COBOL.
</para>
      <para>
"Chapter 2. COBOL Concepts", which describes general concepts of the COBOL
language including program structure, and details of statement components
and notation.
</para>
      <para>
"Chapter 3. Nucleus", which describes the nucleus of all COBOL programs and
the layout of each program division in the nucleus.
</para>
      <para>
"Chapter 4. Table Handling", which describes the handling of data tables in
the Data and Procedure divisions of a COBOL program.
</para>
      <para>
"Chapter 5. Sequential Input and Output", which describes the programming of
input and output of data in files with sequential format.
</para>
      <para>
"Chapter 6. Relative Input and Output", which describes the programming of
input and output of data in files with relative format.
</para>
      <para>
"Chapter 7. Indexed Input and Output", which describes the programming of
input and output of data in files with indexed format.
</para>
      <para>
"Chapter 8. Segmentation", which describes the facility for specifying
permanent and independent object program segments.
</para>
      <para>
"Chapter 9. Library", which describes the source library maintenance feature
of COBOL.
</para>
      <para>
"Chapter 10. Debug and Interactive Debugging", which describes the basic and
interactive debugging features available in CIS COBOL.
</para>
      <para>
"Chapter 11. Interprogram Communication", which describes the ability of CIS
COBOL programs to interface during running and to access common data,
  enabling modular programming.
</para>
      <para>
"Chapter 12. Programming Techniques and Sizing", which describes the means
available for CIS COBOL programmers to estimate object program size and
includes programming techniques in CIS COBOL.
</para>
      <para>
"Appendix A. Reserved Word Table", which lists words reserved for CIS COBOL
functions within a program.
</para>
      <para>
"Appendix B. Character Set and Collating Sequence", which lists all
characters available and their collating sequence.
</para>
      <para>
"Appendix C. Glossary", which lists specific terms used in CIS COBOL.
</para>
      <para>
"Appendix D. Compile - Time Errors", which lists all errors that can be
signalled during program compilation.
</para>
      <para>
"Appendix E. Run-Time Errors", which lists all errors that can be signalled
during program execution.
</para>
      <para>
"Appendix F. Syntax Summary", which summarizes the syntax used in CIS COBOL
programming.
</para>
      <para>
"Appendix G. Summary of Extensions to ANSI COBOL", which summarizes all
extensions to ANSI COBOL provided by CIS COBOL.
</para>
      <para>
"Appendix H. System Dependent Language Features", which describes the
system dependent CIS COBOL entries for use with microcomputers and those
features not included because of hardware requirements.
</para>
      <para>
"Appendix I. Language Specification", which is an overall specification of
the CIS COBOL language.
</para>
    </section>
    <section>
      <title>RELATED PUBLICATIONS</title>
      <para>
No discussion of operating the CIS COBOL Compiler or Run-Time system is
incorporated in this manual. Please refer to document:
</para>
      <para><citetitle pubwork="book">CIS COBOL Operating Guide</citetitle>
                    (for use with the relevant Operating System)
                </para>
    </section>
    <section>
      <title>NOTATION IN THIS MANUAL</title>
      <para>
Throughout this manual, the following notation is used to describe the
format of COBOL statements:
</para>
      <orderedlist>
        <listitem>
          <para>
All words printed in capital letters which are underlined must always
be present when the functions of which they are a part are used. An
error printout will occur during compilation if the underlined words
are absent or incorrectly spelled. The underlining is not necessary
when writing a COBOL source program.
</para>
        </listitem>
        <listitem>
          <para>
All words printed in capital letters which are not underlined are used
for readability only. They may be written, or not, as the programmer wishes.
</para>
        </listitem>
        <listitem>
          <para>
All words printed in small letters are generic terms representing names
which will be devised by the programmer.
</para>
        </listitem>
        <listitem>
          <para>
When material is enclosed in braces { } , a choice must be made from
the options within them.
</para>
        </listitem>
        <listitem>
          <para>
When material is enclosed in square brackets [ ], it is an indication
that the material is an option which may be included or omitted as required.
</para>
        </listitem>
        <listitem>
          <para>
When material is enclosed in square brackets crossed <arg choice="ansi"> </arg>, it is an
indication that the material is mandatory when the ANSI switch is set
(see Chapter 2) but optional otherwise.
</para>
        </listitem>
        <listitem>
          <para>
Language features that are shaded in the text are language extensions
which exceed the ANSI standard.
</para>
        </listitem>
        <listitem>
          <para>
In text, the ellipsis (...) shows the omission of a portion of a source
program or a sequence. This meaning becomes apparent in context.
 </para>
          <para>
In the general formats, the ellipsis represents the position at which
repetition may occur at the user's option. The portion of the format
that may be repeated is determined as follows:
 </para>
          <para>
Given ... in a clause or statement format, scanning right to left,
determine the { or [ immediately to the left of the  ...; continue
scanning right to left and determine the logically matching } or ]; the
... applies to the words between the determined pair of delimiters.
</para>
        </listitem>
        <listitem>
          <para>
The term identifier means either a data-name or a  subscripted
     data-name. An identifier takes the following form:
</para>
          <para>
          data-name-1              [ ({data-name-2 | literal-1}) ]
</para>
          <para>
data-name-2 or literal-1 must be a positive integer in the range 1
to the number of elements in the table.
</para>
        </listitem>
      </orderedlist>
      <para>

Headings are presented in this manual in the following order of importance:
</para>
      <para>
     CHAPTER  N  
                   Chapter Heading
     TITLE
     
ORDER ONE HEADING
ORDER TWO HEADING
Order Three Heading      Text two lines down
Order Four Heading
Order Five Heading:      Text on same line
</para>
      <para>
Numbers one (1) to nine (9) are written in text as letters, e.g. one.
</para>
      <para>
Numbers ten (10) upwards are written in text as numbers, e.g. 12.
</para>
      <para>
The phrase "For documentation purposes only" in the text of this manual
means that the associated coding is accepted syntactically by the Compiler,
but is ignored when producing the object program.
</para>
    </section>
  </preface>
  <xi:include href="chapter01.xml"/>
  <xi:include href="chapter02.xml"/>
  <xi:include href="chapter03.xml"/>
  <xi:include href="chapter04.xml"/>
  <xi:include href="chapter05.xml"/>
  <xi:include href="chapter06.xml"/>
  <xi:include href="chapter07.xml"/>
  <xi:include href="chapter08.xml"/>
  <xi:include href="chapter09.xml"/>
  <xi:include href="chapter10.xml"/>
  <xi:include href="chapter11.xml"/>
  <xi:include href="chapter12.xml"/>
  <xi:include href="appendixa.xml"/>
  <xi:include href="appendixb.xml"/>
  <xi:include href="appendixc.xml"/>
  <xi:include href="compile-time-errors.xml"/>
  <appendix>
    <title>RUN-TIME ERRORS</title>
    <para>
Run-time error messages are preceded by the name and segment number of
the currently executing intermediate code file.
</para>
    <para>
There are two types of runtime errors:   Recoverable and Fatal.
</para>
    <para>
(a)  Recoverable errors
</para>
    <para>
If the programmer has specified the STATUS clause in the FILE-CONTROL
paragraph of a program error handling is the programmer's responsibility.
This will generally only apply to errors that are not considered fatal
by the operating system. (See <emphasis role="underline">File Status</emphasis> in Chapters 5, 6 and 7)
</para>
    <para>
(b)  Fatal errors
</para>
    <para>
All errors except those above are fatal. They may come from the operating
system or from the run-time system. Fatal errors cause a message to be
output to the console which includes a 3-digit error code and reference to
the COBOL statement subsequent to that in which the error occurred. These
fall into two classes:
</para>
    <variablelist>
      <varlistentry>
        <term>(i)  Exceptions</term>
        <listitem>
          <para>
These cover arithmetic overflow, subscript out of range, too many levels of perform nesting.
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>(ii) I-O errors</term>
        <listitem>
          <para>
These exclude those for which STATUS is not selected as above.
</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <informaltable frame="all" colsep="1" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="1in" align="left"/>
        <colspec colwidth="4in" align="left"/>
        <thead>
          <row>
            <entry>Error</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>151</entry>
            <entry>Random read on sequential file</entry>
          </row>
          <row>
            <entry>152</entry>
            <entry>REWRITE on file not open I-O</entry>
          </row>
          <row>
            <entry>153</entry>
            <entry>Subscript out of range</entry>
          </row>
          <row>
            <entry>154</entry>
            <entry>Perform nesting exceeds 22 levels</entry>
          </row>
          <row>
            <entry>156</entry>
            <entry>Invalid file operation</entry>
          </row>
          <row>
            <entry>157</entry>
            <entry>Object file too large</entry>
          </row>
          <row>
            <entry>158</entry>
            <entry>REWRITE on line-sequential file</entry>
          </row>
          <row>
            <entry>159</entry>
            <entry>Malformed line-sequential file</entry>
          </row>
          <row>
            <entry>161</entry>
            <entry>Illegal intermediate code</entry>
          </row>
          <row>
            <entry>162</entry>
            <entry>Arithmetic overflow or underflow</entry>
          </row>
          <row>
            <entry>164</entry>
            <entry>Specified CALL code not supplied or Attempt to call a COBOL module recursively (i.e when is already active)</entry>
          </row>
          <row>
            <entry>165</entry>
            <entry>Incompatible releases of compiler and run-time system</entry>
          </row>
          <row>
            <entry>168</entry>
            <entry>Memory arrangement failure</entry>
          </row>
          <row>
            <entry>169</entry>
            <entry>Invalid indirect sequential file key length (&gt;32 characters)</entry>
          </row>
          <row>
            <entry>170</entry>
            <entry>Illegal operation in Indexed Sequential</entry>
          </row>
          <row>
            <entry>171</entry>
            <entry>Attempt to read I-S record in output/extend mode</entry>
          </row>
          <row>
            <entry>172</entry>
            <entry>Attempt to delete I-S record in non I-O mode</entry>
          </row>
          <row>
            <entry>173</entry>
            <entry>Attempt to write I-S record in input mode</entry>
          </row>
          <row>
            <entry>174</entry>
            <entry>Attempt to CALL/CANCEL on active program</entry>
          </row>
          <row>
            <entry>176</entry>
            <entry>Illegal inter-segment reference</entry>
          </row>
          <row>
            <entry>180</entry>
            <entry>COBOL file malformed</entry>
          </row>
          <row>
            <entry>181</entry>
            <entry>Fatal file malformation</entry>
          </row>
          <row>
            <entry>194 (CP/M 1.4 only)</entry>
            <entry>File size too large (&gt;0.5MB) or Failure to Open on Extent</entry>
          </row>
          <row>
            <entry>195</entry>
            <entry>DELETE/REWRTTE not preceded by a READ</entry>
          </row>
          <row>
            <entry>196</entry>
            <entry>Relative (or Indexed) - Record number too large (&gt;65535)</entry>
          </row>
          <row>
            <entry>197</entry>
            <entry>File save failure</entry>
          </row>
          <row>
            <entry>198</entry>
            <entry>Program load failure (using CHAIN)</entry>
          </row>
          <row>
            <entry>199</entry>
            <entry>Indexed sequential file name too long ( &gt;20 characters)</entry>
          </row>
          <row>
            <entry>200</entry>
            <entry>Insufficient space to load Animator</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
See also appendix D in the <citetitle pubwork="book">CIS COBOL Operating Guide</citetitle> specific to your operating system.
</para>
  </appendix>
  <appendix>
    <title>SYNTAX SUMMARY</title>
    <para>
     All the syntax for CIS COBOL is summarized below.
 </para>
    <para>
     E denotes that the feature is a CIS COBOL extension to ANSI COBOL.
</para>
    <para>
     D denotes that the feature is documentary only in CIS COBOL.
</para>
    <section>
      <title>GENERAL FORMAT FOR IDENTIFICATION DIVISION</title>
      <cmdsynopsis>
        <arg choice="ansi"><emphasis role="underline">IDENTIFICATION DIVISION</emphasis>.</arg>
        <sbr/>
        <arg choice="ansi"><emphasis role="underline">PROGRAM-ID</emphasis>.</arg>
        <arg>program name</arg>
        <sbr/>
        <arg choice="opt"><emphasis role="underline">AUTHOR</emphasis>.</arg>
        <arg choice="opt" rep="repeat">comment entry</arg>
        <sbr/>
        <arg choice="opt"><emphasis role="underline">INSTALLATION</emphasis>.</arg>
        <arg choice="opt" rep="repeat">comment entry</arg>
        <sbr/>
        <arg choice="opt"><emphasis role="underline">DATE-WRITTEN</emphasis>.</arg>
        <arg choice="opt" rep="repeat">comment entry</arg>
        <sbr/>
        <arg choice="opt"><emphasis role="underline">DATE-COMPILED</emphasis>.</arg>
        <arg choice="opt" rep="repeat">comment entry</arg>
        <sbr/>
        <arg choice="opt"><emphasis role="underline">SECURITY</emphasis>.</arg>
        <arg choice="opt" rep="repeat">comment entry</arg>
        <sbr/>
      </cmdsynopsis>
    </section>
    <section>
      <title>GENERAL FORMAT FOR ENVIRONMENT DIVISION</title>
      <cmdsynopsis>
        <arg><emphasis role="underline">ENVIRONMENT DIVISION</emphasis>.</arg>
        <sbr/>
        <arg><emphasis role="underline">CONFIGURATION SECTION</emphasis>.</arg>
        <sbr/>
        <arg><emphasis role="underline">SOURCE-COMPUTER</emphasis>.</arg>
        <arg>source-computer-entry</arg>
        <arg choice="opt">WITH <emphasis role="underline">DEBUGGING</emphasis> <emphasis role="underline">MODE</emphasis></arg>
        <arg>.</arg>
        <sbr/>
        <arg><emphasis role="underline">OBJECT-COMPUTER</emphasis>.</arg>
        <arg>object-computer-entry</arg>
        <sbr/>
        <arg choice="opt">,<emphasis role="underline">MEMORY</emphasis> SIZE <replaceable>integer</replaceable>
              <group choice="req"><arg><emphasis role="underline">WORDS</emphasis></arg><arg><emphasis role="underline">CHARACTERS</emphasis></arg><arg><emphasis role="underline">MODULES</emphasis></arg></group>
            </arg>
        <sbr/>
        <arg choice="opt">,PROGRAM COLLATING <emphasis role="underline">SEQUENCE</emphasis> IS <replaceable>alphabet-name</replaceable></arg>
        <sbr/>
        <!--
            <arg choice="opt">,SEGMENT-LIMIT IS <replaceable>segment-number</replaceable></arg>
          -->
        <arg><emphasis role="underline">SPECIAL-NAMES</emphasis>.</arg>
        <sbr/>
        <arg><emphasis role="underline">SWITCH</emphasis></arg>
        <arg choice="req">0 ... 7</arg>
        <arg choice="opt"><emphasis role="underline">IS</emphasis> mnemonic-name</arg>
        <group choice="req">
          <arg><emphasis role="underline">ON</emphasis> STATUS <emphasis role="underline">IS</emphasis> condition-name-1</arg>
          <arg choice="opt"><emphasis role="underline">OFF</emphasis> STATUS IS condition-name-2</arg>
          <arg><emphasis role="underline">OFF</emphasis> STATUS <emphasis role="underline">IS</emphasis> condition-name-2</arg>
          <arg choice="opt"><emphasis role="underline">ON</emphasis> STATUS <emphasis role="underline">IS</emphasis> condition-name-1</arg>
        </group>
        <sbr/>
        <arg choice="opt">
          <group choice="req">
            <arg><emphasis role="underline">,SYSIN</emphasis></arg>
            <arg><emphasis role="underline">,SYSOUT</emphasis></arg>
          </group>
          <arg><emphasis role="underline">IS</emphasis> mnemonic-name</arg>
        </arg>
        <sbr/>
        <arg choice="opt"><emphasis role="underline">, TAB</emphasis> <emphasis role="underline">IS</emphasis> mnemonic-name</arg>
        <sbr/>
        <!--
            <arg choice="opt" rep="repeat">
              <arg>, alphabet-name IS</arg>
              <group choice="req">
                <arg>STANDARD-1</arg>
                <arg>NATIVE</arg>
              </group>
            </arg>
            <sbr/>
            -->
        <arg choice="opt">, <emphasis role="underline">CURRENCY</emphasis> SIGN <emphasis role="underline">IS</emphasis> literal-9</arg>
        <sbr/>
        <arg choice="opt">, <emphasis role="underline">DECIMAL-POINT</emphasis> <emphasis role="underline">IS</emphasis> COMMA</arg>
        <sbr/>
        <arg choice="opt">
          <phrase role="extension">, <emphasis role="underline">CONSOLE</emphasis> IS <emphasis role="underline">CRT</emphasis></phrase>
        </arg>
        <sbr/>
        <arg choice="opt">
          <phrase role="extension">, <emphasis role="underline">CURSOR</emphasis> IS data-name-1</phrase>
        </arg>
        <arg>.</arg>
        <sbr/>
        <arg><emphasis role="underline">INPUT-OUTPUT SECTION</emphasis>.</arg>
        <sbr/>
        <arg><emphasis role="underline">FILE-CONTROL</emphasis>.</arg>
        <sbr/>
        <arg rep="repeat">file-control-entry</arg>
        <sbr/>
        <arg><emphasis role="underline">I-O-CONTROL</emphasis>.</arg>
        <arg choice="opt" rep="repeat">
          <arg>; <emphasis role="underline">RERUN</emphasis></arg>
          <arg choice="opt">
            <arg>ON</arg>
            <group choice="req">
              <arg>file-name-1</arg>
              <arg>implementor-name</arg>
            </group>
          </arg>
          <arg>EVERY</arg>
          <group choice="req">
            <group choice="req">
              <arg>
                <arg choice="opt"><emphasis role="underline">END</emphasis> OF</arg>
                <group choice="req">
                  <arg>REEL</arg>
                  <arg>UNIT</arg>
                </group>
              </arg>
              <arg>integer-1 <emphasis role="underline">RECORDS</emphasis></arg>
            </group>
            <arg>OF file-name-2</arg>
            <arg>integer-2 <emphasis role="underline">CLOCK-UNITS</emphasis></arg>
            <arg>condition-name</arg>
          </group>
        </arg>
        <sbr/>
        <arg choice="opt" rep="repeat">
          <arg>; <emphasis role="underline">SAME</emphasis> AREA FOR file-name-3</arg>
          <arg choice="opt" rep="repeat">, file-name-4</arg>
        </arg>
        <arg>.</arg>
      </cmdsynopsis>
    </section>
    <section>
      <title>GENERAL FORMAT FOR FILE-CONTROL ENTRY</title>
      <para>
Sequential SELECT:
</para>
      <cmdsynopsis>
        <command><emphasis role="underline">SELECT</emphasis></command>
        <arg>file-name</arg>
        <arg><emphasis role="underline">ASSIGN</emphasis> TO</arg>
        <group choice="req">
          <arg>external-file-name-literal</arg>
          <arg>file-identifier</arg>
        </group>
        <arg choice="opt">
          <arg>,</arg>
          <group>
            <arg>external-file-name-literal</arg>
            <arg>file-identifier</arg>
          </group>
        </arg>
        <sbr/>
        <arg choice="opt">
          <arg>; <emphasis role="underline">ORGANIZATION</emphasis> IS</arg>
          <group>
            <arg><emphasis role="underline">SEQUENTIAL</emphasis></arg>
            <arg><emphasis role="underline">LINE SEQUENTIAL</emphasis></arg>
          </group>
        </arg>
        <sbr/>
        <arg choice="opt">; <emphasis role="underline">ACCESS</emphasis> MODE IS <emphasis role="underline">SEQUENTIAL</emphasis></arg>
        <sbr/>
        <arg choice="opt">; FILE <emphasis role="underline">STATUS</emphasis> IS data-name-1</arg>
      </cmdsynopsis>
      <para>
Relative Select:
</para>
      <cmdsynopsis>
        <command><emphasis role="underline">SELECT</emphasis></command>
        <arg>file-name</arg>
        <sbr/>
        <arg><emphasis role="underline">ASSIGN</emphasis> TO</arg>
        <group choice="req">
          <arg>external-file-name-literal</arg>
          <arg>file-identifier</arg>
        </group>
        <arg choice="opt">
          <arg>,</arg>
          <group choice="req">
            <arg>external-file-name-literal</arg>
            <arg>file-identifier</arg>
          </group>
        </arg>
        <sbr/>
        <arg>; <emphasis role="underline">ORGANIZATION</emphasis> IS <emphasis role="underline">RELATIVE</emphasis></arg>
        <sbr/>
        <arg choice="opt">
          <arg>; <emphasis role="underline">ACCESS</emphasis> MODE IS</arg>
          <group choice="req">
            <arg><emphasis role="underline">SEQUENTIAL</emphasis> ,<emphasis role="underline">RELATIVE</emphasis> KEY IS data-name</arg>
            <arg>
              <group choice="req">
                <arg><emphasis role="underline">RANDOM</emphasis></arg>
                <arg><emphasis role="underline">DYNAMIC</emphasis></arg>
              </group>
              <arg>,<emphasis role="underline">RELATIVE</emphasis> KEY IS data-name</arg>
            </arg>
          </group>
        </arg>
        <sbr/>
        <arg choice="opt">; FILE <emphasis role="underline">STATUS</emphasis> IS data-name-2</arg>
      </cmdsynopsis>
      <para>
  Indexed Select:
</para>
      <cmdsynopsis>
        <command><emphasis role="underline">SELECT</emphasis></command>
        <arg>file-name</arg>
        <sbr/>
        <arg><emphasis role="underline">ASSIGN</emphasis> TO</arg>
        <group choice="req">
          <arg>external-file-name-literal</arg>
          <arg>file-identifier</arg>
        </group>
        <arg choice="opt">
          <arg>,</arg>
          <group choice="req">
            <arg>external-file-name-literal</arg>
            <arg>file-identifier</arg>
          </group>
        </arg>
        <sbr/>
        <arg>; <emphasis role="underline">ORGANIZATION</emphasis> IS INDEXED</arg>
        <sbr/>
        <arg choice="opt">
          <arg>; <emphasis role="underline">ACCESS</emphasis> MODE IS</arg>
          <group choice="req">
            <arg><emphasis role="underline">SEQUENTIAL</emphasis></arg>
            <arg><emphasis role="underline">RANDOM</emphasis></arg>
            <arg><emphasis role="underline">DYNAMIC</emphasis></arg>
          </group>
        </arg>
        <sbr/>
        <arg>; <emphasis role="underline">RECORD</emphasis> KEY IS data-name-1</arg>
        <sbr/>
        <arg choice="opt">; FILE <emphasis role="underline">STATUS</emphasis> IS data-name-3</arg>
      </cmdsynopsis>
    </section>
    <section>
      <title>GENERAL FORMAT FOR THE DATA DIVISION</title>
      <cmdsynopsis>
        <arg>DATA DIVISION.</arg>
        <sbr/>
        <arg choice="opt">FILE SECTION.<sbr/>
          <arg>FD file-name</arg><sbr/>
            <arg choice="opt" role="extension"><arg>; BLOCK CONTAINS</arg><arg>integer</arg><group choice="req"><arg>RECORDS</arg><arg>CHARACTERS</arg></group></arg><sbr/>

            <arg choice="opt" role="extension"><arg>; RECORD CONTAINS</arg><arg choice="opt">integer-1 TO</arg><arg>integer-2 CHARACTERS</arg></arg><sbr/>
            <arg role="extension"><arg>; LABEL</arg><group choice="req"><arg>RECORD IS</arg><arg>RECORDS ARE</arg></group><group choice="req"><arg>STANDARD</arg><arg>OMITTED</arg></group></arg><sbr/>

            <arg role="extension"><arg>; VALUE OF</arg><arg>data-name-1 IS literal-1</arg><arg choice="opt" rep="repeat">, data-name-2 IS literal-2</arg></arg><sbr/>

            <arg role="extension"><arg>; DATA</arg><group choice="req"><arg>RECORD IS</arg><arg>RECORDS ARE</arg></group><arg>data-name-1</arg><arg choice="opt" rep="repeat">, data-name-2</arg></arg><sbr/>
<arg choice="opt" role="extension">; CODE-SET IS alphabet-name</arg><arg>.</arg><sbr/>

<arg choice="opt" rep="repeat">file-description-entry  <arg choice="opt" rep="repeat">record-description-entry</arg></arg></arg>
        <sbr/>
        <arg choice="opt">WORKING-STORAGE SECTION.<sbr/>
    <arg choice="opt" rep="repeat"><group choice="req"><arg>77-level-description-entry</arg><arg>record-description-entry</arg></group></arg>
</arg>
        <sbr/>
        <arg choice="opt">LINKAGE-SECTION.<sbr/>
    <arg choice="opt" rep="repeat"><group choice="req"><arg>77-level-description-entry</arg><arg>record-description-entry</arg></group></arg>
</arg>
      </cmdsynopsis>
    </section>
    <section>
      <title>GENERAL FORMAT FOR DATA DESCRIPTION ENTRY</title>
      <cmdsynopsis>
        <arg>level-number</arg>
        <group choice="req">
          <arg>data-name-1</arg>
          <arg>FILLER</arg>
        </group>
        <sbr/>
        <arg choice="opt">; REDEFINES data-name-2</arg>
        <sbr/>
        <arg choice="opt">
          <group choice="req">
            <arg>PICTURE</arg>
            <arg>PIC</arg>
          </group>
          <arg>IS character-string</arg>
        </arg>
        <sbr/>
        <arg choice="opt">
          <arg>;</arg>
          <arg choice="opt">USAGE IS</arg>
          <group choice="req">
            <arg>COMPUTATIONAL</arg>
            <arg>COMP</arg>
            <arg>COMPUTATIONAL-3</arg>
            <arg>COMP-3</arg>
            <arg>DISPLAY</arg>
          </group>
        </arg>
        <sbr/>
        <arg choice="opt">
          <arg>;</arg>
          <arg choice="opt">SIGN IS</arg>
          <group choice="req">
            <arg>LEADING</arg>
            <arg>TRAILING</arg>
          </group>
          <arg choice="opt">SEPARATE CHARACTER</arg>
        </arg>
        <sbr/>
        <arg choice="opt">
          <arg>;</arg>
          <group choice="req">
            <arg>SYNCHRONIZED</arg>
            <arg>SYNC</arg>
          </group>
          <group choice="req">
            <arg>LEFT</arg>
            <arg>RIGHT</arg>
          </group>
        </arg>
        <sbr/>
        <arg choice="opt">
          <arg>;</arg>
          <group choice="req">
            <arg>JUSTIFIED</arg>
            <arg>JUST</arg>
          </group>
          <arg>RIGHT</arg>
        </arg>
        <arg choice="opt">
          <arg>;</arg>
          <arg>BLANK WHEN ZERO</arg>
        </arg>
        <sbr/>
        <arg choice="opt">
          <arg>;</arg>
          <arg>VALUE IS literal</arg>
        </arg>
      </cmdsynopsis>
    </section>
    <section>
      <title>GENERAL FORMAT FOR PROCEDURE DIVISION</title>
      <para>
   Declarative format:
   </para>
      <cmdsynopsis>
        <arg>PROCEDURE DIVISION</arg>
        <arg choice="opt">USING data-name-1 <arg choice="opt" rep="repeat">, data-name-2</arg></arg>
        <arg>.</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <arg choice="opt">
          <arg>DECLARATIVES.</arg>
          <arg choice="req" rep="repeat">
            <arg>section-name SECTION</arg>
            <arg choice="opt">segment-number</arg>
            <arg>.   declarative-sentence</arg>
            <sbr/>
            <arg choice="opt" rep="repeat">paragraph-name.     <arg choice="opt" rep="repeat">sentence</arg></arg>
          </arg>
          <sbr/>
          <arg>END DECLARATIVES.</arg>
        </arg>
        <sbr/>
        <arg choice="req">
          <arg choice="ansi">section-name SECTION      <arg choice="opt">segment-number</arg></arg>
          <sbr/>
          <arg choice="opt">
            <arg choice="ansi"> paragraph-name</arg>
            <arg choice="opt" rep="repeat">sentence</arg>
          </arg>
        </arg>
      </cmdsynopsis>
      <para>
   Non-declarative format:
   </para>
      <cmdsynopsis>
        <arg>PROCEDURE DIVISION</arg>
        <arg choice="opt">USING data-name-1 <arg choice="opt" rep="repeat">, data-name-2</arg></arg>
        <arg>.</arg>
      </cmdsynopsis>
    </section>
    <section>
      <title>GENERAL FORMAT FOR VERBS</title>
      <cmdsynopsis>
        <command>ACCEPT</command>
        <arg>data-name-1</arg>
        <arg choice="opt" role="extension">AT <group choice="req"><arg>data-name-2</arg><arg>literal-1</arg></group></arg>
        <arg>FROM CRT</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>ACCEPT</command>
        <arg>identifier</arg>
        <arg choice="opt">FROM CONSOLE</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>ADD</command>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>literal-1</arg>
        </group>
        <arg choice="opt" rep="repeat">
          <arg>,</arg>
          <group choice="req">
            <arg>identifier-2</arg>
            <arg>literal-2</arg>
          </group>
        </arg>
        <arg>TO identifier-m</arg>
        <arg choice="opt">ROUNDED</arg>
        <sbr/>
        <arg choice="opt" rep="repeat">, identifier-n<arg choice="opt">ROUNDED</arg></arg>
        <arg choice="opt">; ON SIZE ERROR imperative-statement</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>ADD</command>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>literal-1</arg>
        </group>
        <arg>,</arg>
        <group choice="req">
          <arg>identifier-2</arg>
          <arg>literal-2</arg>
        </group>
        <arg choice="opt" rep="repeat">
          <arg>,</arg>
          <group choice="req">
            <arg>identifier-3</arg>
            <arg>literal-3</arg>
          </group>
        </arg>
        <arg>GIVING identifier-m</arg>
        <arg choice="opt">ROUNDED</arg>
        <arg choice="opt">, identifier-n <arg choice="opt">ROUNDED</arg></arg>
        <arg choice="opt">; ON SIZE ERROR imperative-statement</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>ALTER</command>
        <arg>procedure-name-1 TO</arg>
        <arg choice="opt">PROCEED TO</arg>
        <arg>procedure-name-2</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>CALL</command>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>literal-1</arg>
        </group>
        <arg choice="opt">
          <arg>USING data-name-1</arg>
          <arg choice="opt" rep="repeat">, data-name-2</arg>
        </arg>
        <arg choice="opt">ON OVERFLOW imperative-statement</arg>
      </cmdsynopsis>
      <!--
        <cmdsynopsis role="extension">
          <command>CALL</command>
          <group choice="req">
            <arg>literal-2</arg>
            <arg>identifier-2</arg>
          </group>
          <arg choice="opt">
            <arg>USING data-name-3</arg>
            <arg choice="opt" rep="repeat">, data-name-4</arg>
          </arg>
        </cmdsynopsis>
        -->
      <cmdsynopsis>
        <command>CANCEL</command>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>literal-1</arg>
        </group>
        <arg choice="opt" rep="repeat">
          <group choice="req">
            <arg>identifier-2</arg>
            <arg>literal-2</arg>
          </group>
        </arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <arg>DELETE file-name RECORD</arg>
        <arg choice="opt">;INVALID KEY imperative-statement</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>DISPLAY</command>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>literal-1</arg>
        </group>
        <arg choice="opt" rep="repeat">
          <arg>,</arg>
          <group choice="req">
            <arg>identifier-2</arg>
            <arg>literal-2</arg>
          </group>
        </arg>
        <arg choice="opt">UPON CONSOLE</arg>
      </cmdsynopsis>
      <cmdsynopsis role="extension">
        <command>DISPLAY</command>
        <group choice="req">
          <arg>data-name-1</arg>
          <arg>literal-3</arg>
        </group>
        <arg choice="opt">
          <arg>AT</arg>
          <group choice="req">
            <arg>data-name-2</arg>
            <arg>literal-4</arg>
          </group>
        </arg>
        <arg>UPON</arg>
        <group choice="req">
          <arg>CRT</arg>
          <arg>CRT-UNDER</arg>
        </group>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>DIVIDE</command>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>literal-1</arg>
        </group>
        <arg>INTO</arg>
        <arg>identifier-2</arg>
        <arg choice="opt">ROUNDED</arg>
        <sbr/>
        <arg choice="opt" rep="repeat">, identifier-3 <arg choice="opt">ROUNDED</arg></arg>
        <arg choice="opt">; ON SIZE ERROR imperative-statement</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>DIVIDE</command>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>literal-1</arg>
        </group>
        <arg>INTO</arg>
        <group choice="req">
          <arg>identifier-2</arg>
          <arg>literal-2</arg>
        </group>
        <arg>GIVING</arg>
        <arg>identifier-3</arg>
        <arg choice="opt">ROUNDED</arg>
        <arg choice="opt" rep="repeat">
          <arg>,</arg>
          <arg>identifier-4</arg>
          <arg choice="opt">ROUNDED</arg>
        </arg>
        <arg choice="opt">; ON SIZE ERROR imperative-statement</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>DIVIDE</command>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>literal-1</arg>
        </group>
        <arg>BY</arg>
        <group choice="req">
          <arg>identifier-2</arg>
          <arg>literal-2</arg>
        </group>
        <arg>GIVING</arg>
        <arg>identifier-3</arg>
        <arg choice="opt">ROUNDED</arg>
        <arg choice="opt" rep="repeat">
          <arg>,</arg>
          <arg>identifier-4</arg>
          <arg choice="opt">ROUNDED</arg>
        </arg>
        <arg choice="opt">; ON SIZE ERROR imperative-statement</arg>
      </cmdsynopsis>
      <cmdsynopsis role="extension">
        <command>ENTER</command>
        <arg>language-name</arg>
        <arg choice="opt">routine-name</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>EXIT</command>
        <arg choice="opt">PROGRAM</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>GO TO</command>
        <arg choice="req">procedure-name-1</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>GO TO</command>
        <arg>procedure-name-1</arg>
        <arg choice="opt" rep="repeat">, procedure-name-2</arg>
        <arg>, procedure-name-n</arg>
        <arg>DEPENDING ON identifier</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>IF</command>
        <arg>condition;</arg>
        <phrase role="extension">
          <arg choice="opt" role="extension">THEN</arg>
        </phrase>
        <group choice="req">
          <arg>statement-1</arg>
          <arg>NEXT SENTENCE</arg>
        </group>
        <group choice="req">
          <arg>; ELSE statement-2</arg>
          <arg>; ELSE NEXT SENTENCE</arg>
        </group>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>INSPECT</command>
        <arg>identifier-1</arg>
        <arg>TALLYING</arg>
        <arg>identifier-2 FOR</arg>
        <arg>,</arg>
        <group choice="req">
          <arg>ALL</arg>
          <arg>LEADING</arg>
          <arg>CHARACTERS</arg>
        </group>
        <group choice="req">
          <arg>identifier-3</arg>
          <arg>literal-1</arg>
        </group>
        <arg choice="opt">
          <group choice="req">
            <arg>BEFORE</arg>
            <arg>AFTER</arg>
          </group>
          <arg>INITIAL</arg>
          <group choice="req">
            <arg>identifier-7</arg>
            <arg>literal-5</arg>
          </group>
        </arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>INSPECT</command>
        <arg>identifier-1</arg>
        <arg>REPLACING</arg>
        <sbr/>
        <group choice="req">
          <arg>CHARACTERS BY <group><arg>identifier-6</arg><arg>literal-4</arg></group></arg>
          <arg>
            <arg>,</arg>
            <group choice="req">
              <arg>ALL</arg>
              <arg>LEADING</arg>
              <arg>FIRST</arg>
            </group>
            <arg>,</arg>
            <group choice="req">
              <arg>identifier-5</arg>
              <arg>literal-3</arg>
            </group>
            <arg>BY</arg>
            <group choice="req">
              <arg>identifier-6</arg>
              <arg>literal-4</arg>
            </group>
          </arg>
        </group>
        <sbr/>
        <arg choice="opt">
          <group choice="req">
            <arg>BEFORE</arg>
            <arg>AFTER</arg>
          </group>
          <arg>INITIAL</arg>
          <group choice="req">
            <arg>identifier-7</arg>
            <arg>literal-5</arg>
          </group>
        </arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>INSPECT</command>
        <arg>identifier</arg>
        <arg>TALLYING</arg>
        <arg>tally-clause</arg>
        <arg>REPLACING</arg>
        <arg>replacing-clause</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>MOVE</command>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>literal</arg>
        </group>
        <arg>TO</arg>
        <arg>identifier-2</arg>
        <arg choice="opt">,  identifier-3  ...</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>MULTIPLY</command>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>literal-1</arg>
        </group>
        <arg>BY identifier-2</arg>
        <arg choice="opt">ROUNDED</arg>
        <sbr/>
        <arg choice="opt" rep="repeat">, identifier-3 <arg choice="opt">ROUNDED</arg></arg>
        <arg choice="opt">; ON SIZE ERROR imperative-statement</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>MULTIPLY</command>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>literal-1</arg>
        </group>
        <arg>BY</arg>
        <group choice="req">
          <arg>identifier-2</arg>
          <arg>literal-2</arg>
        </group>
        <arg>GIVING</arg>
        <arg>identifier-3</arg>
        <arg choice="opt">ROUNDED</arg>
        <sbr/>
        <arg choice="opt" rep="repeat">, identifier-4 <arg choice="opt">ROUNDED</arg></arg>
        <arg choice="opt">; ON SIZE ERROR imperative-statement</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>OPEN</command>
        <group choice="req">
          <arg>
            <arg>INPUT file-name-1</arg>
            <arg choice="opt" rep="repeat">, file-name-2</arg>
            <arg>OUTPUT file-name-3</arg>
            <arg choice="opt" rep="repeat">, file-name-4</arg>
            <arg>I-O file-name-5</arg>
            <arg choice="opt" rep="repeat">, file-name-6</arg>
            <arg>EXTEND file-name-7</arg>
            <arg choice="opt" rep="repeat">, file-name-8</arg>
          </arg>
        </group>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>PERFORM</command>
        <arg>procedure-name-1</arg>
        <arg choice="opt">
          <group choice="req">
            <arg>THROUGH</arg>
            <arg>THRU</arg>
          </group>
          <arg>procedure-name-2</arg>
        </arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>PERFORM</command>
        <arg>procedure-name-1</arg>
        <arg choice="opt">
          <group choice="req">
            <arg>THROUGH</arg>
            <arg>THRU</arg>
          </group>
          <arg>procedure-name-2</arg>
        </arg>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>integer-1</arg>
        </group>
        <arg>TIMES</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>PERFORM</command>
        <arg>procedure-name-1</arg>
        <arg choice="opt">
          <group choice="req">
            <arg>THROUGH</arg>
            <arg>THRU</arg>
          </group>
          <arg>procedure-name-2</arg>
        </arg>
        <arg>UNTIL</arg>
        <arg>condition-1</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>READ</command>
        <arg>file-name</arg>
        <arg choice="opt">NEXT</arg>
        <arg>RECORD</arg>
        <arg choice="opt">INTO identifier</arg>
        <arg choice="opt">; AT END imperative- statement</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>READ</command>
        <arg>file-name</arg>
        <arg>RECORD</arg>
        <arg choice="opt">INTO identifier</arg>
        <arg choice="opt">;INVALID KEY imperative-statement</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>REWRITE</command>
        <arg>record-name</arg>
        <arg choice="opt">FROM identifier</arg>
        <arg choice="opt">; INVALID KEY imperative-statement</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>SET</command>
        <group choice="req">
          <arg>
            <arg>identifier-1</arg>
            <arg choice="opt" rep="repeat">, identifier-2</arg>
          </arg>
          <arg>
            <arg>index-name-1</arg>
            <arg choice="opt" rep="repeat">, index-name-2</arg>
          </arg>
        </group>
        <group choice="req">
          <arg>TO</arg>
          <arg>UP BY</arg>
          <arg>DOWN BY</arg>
        </group>
        <group choice="req">
          <arg>identifier-3</arg>
          <arg>index-name-3</arg>
          <arg>integer-1</arg>
        </group>
      </cmdsynopsis>
      <cmdsynopsis>
        <arg>START file-name</arg>
        <arg choice="opt">
          <arg>KEY</arg>
          <group>
            <arg>IS =</arg>
            <arg>IS &gt;</arg>
            <arg>IS NOT &lt;</arg>
          </group>
          <arg>data-name</arg>
          <sbr/>
          <arg choice="opt">;INVALID KEY imperative-statement</arg>
        </arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>STOP</command>
        <group choice="req">
          <arg>RUN</arg>
          <arg>literal</arg>
        </group>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>SUBTRACT</command>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>literal-1</arg>
        </group>
        <arg>,</arg>
        <group choice="req" rep="repeat">
          <arg>identifier-2</arg>
          <arg>literal-2</arg>
        </group>
        <arg>...</arg>
        <arg>FROM</arg>
        <arg>identifier-m</arg>
        <arg choice="opt">ROUNDED</arg>
        <arg choice="opt" rep="repeat">
          <arg>, identifier-n</arg>
          <arg choice="opt">ROUNDED</arg>
        </arg>
        <arg choice="opt">; ON SIZE ERROR imperative-statement</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>SUBTRACT</command>
        <group choice="req">
          <arg>identifier-1</arg>
          <arg>literal-1</arg>
        </group>
        <arg>,</arg>
        <group choice="req" rep="repeat">
          <arg>identifier-2</arg>
          <arg>literal-2</arg>
        </group>
        <arg>...</arg>
        <arg>FROM</arg>
        <arg>identifier-m</arg>
        <arg>GIVING</arg>
        <arg>identifier-n</arg>
        <arg choice="opt">ROUNDED</arg>
        <arg choice="opt" rep="repeat">
          <arg>, identifier-o</arg>
          <arg choice="opt">ROUNDED</arg>
        </arg>
        <arg choice="opt">; ON SIZE ERROR imperative-statement</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>USE  AFTER STANDARD</command>
        <group choice="req">
          <arg>EXCEPTION</arg>
          <arg>ERROR</arg>
        </group>
        <arg>PROCEDURE ON</arg>
        <group choice="req">
          <arg>file-name-1</arg>
          <arg>INPUT</arg>
          <arg>OUTPUT</arg>
          <arg>I-O</arg>
          <arg>EXTEND</arg>
        </group>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>USE FOR DEBUGGING ON</command>
        <group choice="req">
          <arg>procedure-name-1</arg>
          <arg>ALL PROCEDURES</arg>
        </group>
        <arg choice="opt">
          <arg>,</arg>
          <group choice="req" rep="repeat">
            <arg>procedure-name-2</arg>
            <arg>ALL PROCEDURES</arg>
          </group>
        </arg>
        <arg>OUTPUT</arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>WRITE</command>
        <arg>record-name</arg>
        <arg choice="opt">FROM identifier-1</arg>
        <arg choice="opt">
          <group>
            <arg>BEFORE</arg>
            <arg>AFTER</arg>
          </group>
          <arg>ADVANCING</arg>
          <group>
            <arg>integer <group><arg>LINE</arg><arg>LINES</arg></group></arg>
            <arg role="extension">TAB</arg>
            <arg>PAGE</arg>
          </group>
        </arg>
      </cmdsynopsis>
      <cmdsynopsis>
        <command>WRITE</command>
        <arg>record-name</arg>
        <arg choice="opt">FROM identifier</arg>
        <arg choice="opt">; INVALID KEY imperative-statement</arg>
      </cmdsynopsis>
    </section>
    <section>
      <title>GENERAL FORM FOR COPY STATEMENT</title>
      <cmdsynopsis>
        <arg>COPY</arg>
        <group>
          <arg>text-name</arg>
          <arg>external-file-name-literal</arg>
        </group>
        <arg>.</arg>
      </cmdsynopsis>
    </section>
  </appendix>
  <appendix>
    <title>SUMMARY OF EXTENSIONS TO ANSI COBOL</title>
    <para>
CIS COBOL is oriented to microcomputer users with the system readily accessible
and usually with a CRT. CIS COBOL therefore provides extensions for
interactive working, program control of files, text file handling and rapid
development and testing. These facilities are summarized below.
</para>
    <section>
      <title>SCREEN FORMATTING AND DATA ENTRY</title>
      <section>
        <title>THE ACCEPT STATEMENT</title>
        <para>
An additional format for the ACCEPT statement is provided as follows:
  </para>
        <cmdsynopsis>
          <command>ACCEPT</command>
          <arg>data-name-1</arg>
          <arg choice="opt">AT <group choice="req"><arg>data-name-2</arg><arg>literal-1</arg></group></arg>
          <arg>FROM CRT</arg>
        </cmdsynopsis>
        <variablelist termlength="11" spacing="compact">
          <varlistentry>
            <term>data-name-2</term>
            <listitem>
              <para>allows the start of screen to be changed dynamically. It
refers to a PIC 9999 field where the most significant 99 is a
line count 1-25 and the least significant 99 is a character position 1-80.
</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>data-name-1</term>
            <listitem>
              <para>refers to a record, group or elementary item but may not be subscripted.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>literal-1</term>
            <listitem>
              <para>is a numeric literal</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
NOTE: See Chapter 3 for description. See also Appendix H for Environment Division changes.
</para>
      </section>
      <section>
        <title>THE DISPLAY STATEMENT</title>
        <para>
An additional format for the DISPLAY statement is provided as follows:
</para>
        <para>
   Format
</para>
        <cmdsynopsis>
          <command>DISPLAY</command>
          <group choice="req">
            <arg>data-name-1</arg>
            <arg>literal-3</arg>
          </group>
          <arg choice="opt">AT <group choice="req"><arg>data-name-2</arg><arg>literal-1</arg></group></arg>
          <arg>UPON</arg>
          <group choice="req">
            <arg>CRT</arg>
            <arg>CRT-UNDER</arg>
          </group>
        </cmdsynopsis>
        <variablelist termlength="11" spacing="compact">
          <varlistentry>
            <term>literal-3</term>
            <listitem>
              <para>is an alphanumeric literal</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>dataname-1</term>
            <listitem>
              <para>refers to a record, group or elementary item but may not be subscripted</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>dataname-2</term>
            <listitem>
              <para>defines the left-most position on the screen.
It refers to a PIC 9999 field where the most significant 99 is a line count 1-25
and the least significant 99 is a character position 1-80.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
NOTE:  See Chapter 3 for description.
</para>
      </section>
    </section>
    <section>
      <title>DISK FILES</title>
      <para>
Two extensions are offered by CIS COBOL file processing; these are as follows:
</para>
      <orderedlist spacing="compact">
        <listitem>
          <para>
Line sequential files
</para>
        </listitem>
        <listitem>
          <para>
Run time input of filenames
</para>
        </listitem>
      </orderedlist>
      <section>
        <title>LINE SEQUENTIAL FILES</title>
        <para>
When LINE SEQUENTIAL ORGANIZATION is specified in the FILE CONTROL
paragraph ORGANIZATION IS entry, the file is treated as consisting of
variable length records separated by the lire delimiter characters.
Trailing spaces in output records are replaced by a record terminator which
is operating system dependent.
</para>
      </section>
      <section>
        <title>RUN TIME INPUT OF FILENAMES</title>
        <para>
The ASSIGNed name in the SELECT statement for a file is processed on
OPENing as follows:
</para>
        <para>
When the INPUT or OUTPUT phrase is specified, execution of OPEN causes
checking of the file names in accordance with the operating system
conventions for opening an input or output file. The full operating system
features for file reallocation and device control are therefore available to
the CIS COBOL program.
</para>
      </section>
    </section>
    <section>
      <title>LOWER CASE CHARACTERS</title>
      <para>
The full alphanumeric lower case a to z is available in CIS COBOL.
Reserved and user word characters are read as their upper case equivalents (A to Z).
</para>
    </section>
    <section>
      <title>HEXADECIMAL VALUES</title>
      <para>
Hexadecimal binary values can be attributed to non-numeric literals in
CIS COBOL by expressing them as X "xx", where x is a hexadecimal character
in the set 0-9, A-F; xx can be repeated up to 120 times, but the number of
hexadecimal digits must be even.
</para>
    </section>
    <section>
      <title>INTERACTIVE DEBUGGING</title>
      <para>
There is a Run-Time Debug Package to provide break-point facilities in
the user's program. Programs may be run from the start until a specified
break-point is reached, when control is passed back to the user. At this
point, data areas may be inspected or changed.
 </para>
      <para>
The Debug package is entered as an option by the user and the user
program is then tested line by line, paragraph by paragraph and so on as
required. The commands to the package can reference procedure statements
and data areas by means of a 4-digit hexadecimal code output by the compiler
against each line of the compilation listing. Powerful macros of commands
can be used to give very sophisticated debugging facilities. The precise
details for using the package vary according to the host operating system
and are described in the appropriate Operating Guide.
 </para>
    </section>
  </appendix>
  <appendix>
    <title>SYSTEM DEPENDENT LANGUAGE FEATURES</title>
    <para>
This Appendix summarizes those parts of a COBOL program that need to be
changed to run them as CIS COBOL programs and those parts that do not need
changing specifically but are ignored by the CIS COBOL compiler when
generating the object program.
</para>
    <section>
      <title>MANDATORY CHANGES</title>
      <section>
        <title>ENVIRONMENT DIVISION</title>
        <para>
The only statements in the environment division that must be
specialized for CIS COBOL are shown below:
</para>
        <section>
          <title>Configuration Section</title>
          <screen>
SPECIAL-NAMES. special names entry
</screen>
          <para>
special names entry must include the following:
</para>
          <screen>
CURSOR IS data-name-1
</screen>
          <para>
The CURSOR IS data-name-1 clause specifies the data-name which will contain
the CRT cursor address as used by ACCEPT statements. Data-name-1 must be
declared in the Working-Storage section as a 4 character item. The
interpretation of the 4 characters is given in the ACCEPT statement description.
</para>
        </section>
        <section>
          <title>Input-Output Section</title>
          <para>
File names must be as described in Appendix F of the <citetitle pubwork="book">CIS COBOL Operating Guide</citetitle>.
</para>
        </section>
      </section>
    </section>
    <section>
      <title>STATEMENTS COMPILED AS DOCUMENTATION ONLY</title>
      <para>
COBOL programs not specifically written for compilation as CIS COBOL on
microcomputers can still be compiled. Statements using features that are
not available are treated as documentary only, and are not compiled. A
summary of these features follows:
</para>
      <section>
        <title>ENVIRONMENT DIVISION</title>
        <section>
          <title>I-O-Control Paragraph</title>
          <para>
The clauses that refer to a real time clock and magnetic tape in this
paragraph are ignored by the compiler during compilation but do not cause
compile times errors. These clauses are as follows:
</para>
          <cmdsynopsis>
            <arg>END OF</arg>
            <group choice="req">
              <arg>REEL</arg>
              <arg>UNIT</arg>
            </group>
            <arg>of file-name-2</arg>
          </cmdsynopsis>
          <para>
(no magnetic tape)
</para>
          <cmdsynopsis>
            <arg>integer-2</arg>
            <arg>CLOCK  UNITS</arg>
          </cmdsynopsis>
          <para>
(no clock)
</para>
        </section>
      </section>
      <section>
        <title>DATA DIVISION</title>
        <section>
          <title>File Description Paragraph</title>
          <para>
The following complete statements in the file description are ignored
by the compiler during compilation but do not cause compile time errors:
</para>
          <cmdsynopsis>
            <arg>BLOCK</arg>
            <arg>CONTAINS</arg>
            <arg>integer-1</arg>
            <arg>TO</arg>
            <arg>integer-2</arg>
            <group choice="req">
              <arg>RECORDS</arg>
              <arg>CHARACTERS</arg>
            </group>
          </cmdsynopsis>
          <cmdsynopsis>
            <arg>CODE-SET IS</arg>
            <arg>alphabetic-name</arg>
          </cmdsynopsis>
          <cmdsynopsis>
            <arg>LABEL</arg>
            <group choice="req">
              <arg>RECORD IS</arg>
              <arg>RECORDS ARE</arg>
            </group>
            <group choice="req">
              <arg>STANDARD</arg>
              <arg>OMITTED</arg>
            </group>
          </cmdsynopsis>
          <cmdsynopsis>
            <arg>VALUE OF</arg>
            <arg>implementor-name-1 IS literal-1</arg>
            <arg choice="opt">, implementor-name-2 IS literal-2</arg>
          </cmdsynopsis>
        </section>
      </section>
      <section>
        <title>PROCEDURE DIVISION</title>
        <section>
          <title>CLOSE Statement</title>
          <para>
The following phrases in the CLOSE statement are ignored by the
compiler during compilation but do not cause compiler-time errors:
</para>
          <cmdsynopsis>
            <group choice="req">
              <arg>REEL</arg>
              <arg>UNIT</arg>
            </group>
          </cmdsynopsis>
          <para>
(No magnetic tape)
</para>
        </section>
      </section>
    </section>
  </appendix>
  <appendix>
    <title>LANGUAGE SPECIFICATION</title>
    <para>
CIS COBOL is ANSI COBOL as given in "American National Standard Programming
Language COBOL" (ANSI X.3.23 1974). CIS COBOL implements both levels of
ANSI COBOL. The following modules are fully implemented at Level 1:
 </para>
    <itemizedlist>
      <listitem>
        <para>Nucleus</para>
      </listitem>
      <listitem>
        <para>Table Handling</para>
      </listitem>
      <listitem>
        <para>Sequential Input and Output</para>
      </listitem>
      <listitem>
        <para>Relative Input and Output</para>
      </listitem>
      <listitem>
        <para>Indexed Input and Output</para>
      </listitem>
      <listitem>
        <para>Segmentation</para>
      </listitem>
      <listitem>
        <para>Library</para>
      </listitem>
      <listitem>
        <para>Inter-Program Communication</para>
      </listitem>
      <listitem>
        <para>Debug</para>
      </listitem>
    </itemizedlist>
    <para>
In addition many Level 2 features are implemented such as:
</para>
    <itemizedlist>
      <listitem>
        <para>Nucleus - Nested IF, PERFORM UNTIL</para>
      </listitem>
      <listitem>
        <para>Relative and Indexed sequential I/O - START statement</para>
      </listitem>
      <listitem>
        <para>Inter-Program Communication - Fully implemented at level 2</para>
      </listitem>
    </itemizedlist>
    <para>
     This appendix specifies the implementation of Version 4.3 CIS COBOL. The
     implementation of each of the eight standard COBOL modules listed above is
     given under the following headings as applicable:
</para>
    <simplelist>
      <member>Level 1 Implementation</member>
      <member>Level 2 Implementation</member>
      <member>CIS COBOL Extensions</member>
    </simplelist>
    <para>
Appendix F in this manual is a CIS COBOL syntax summary.
</para>
    <section>
      <title>NUCLEUS</title>
      <section>
        <title>Level One Implementation</title>
        <para>
Fully implemented to Level One.
</para>
      </section>
      <section>
        <title>Level Two Implementation</title>
        <orderedlist>
          <listitem>
            <para>
DATE-COMPILED in the Identification Division is accepted for documentation purposes only.
</para>
          </listitem>
          <listitem>
            <para>
Up to 49 Level Numbers are permitted and 1-9 can be a single digit.
</para>
          </listitem>
          <listitem>
            <para>
The characters , and ; are permitted as separators
</para>
          </listitem>
          <listitem>
            <para>
The character  '&gt;', '=' and '&lt;' are permitted in relative conditions.
</para>
          </listitem>
          <listitem>
            <para>
The PERFORM ... THROUGH ... UNTIL feature is implemented.
</para>
          </listitem>
          <listitem>
            <para>
Plural forms of the figurative constants can be used.
</para>
          </listitem>
          <listitem>
            <para>
IF statements can be nested.
</para>
          </listitem>
          <listitem>
            <para>
Mnemonic names are permitted in ACCEPT and DISPLAY statements (See CIS COBOL extensions 6 and 7 below).
</para>
          </listitem>
          <listitem>
            <para>
 Procedure names can be all digits.
</para>
          </listitem>
          <listitem>
            <para>
REDEFINES clauses can be nested.
</para>
          </listitem>
          <listitem>
            <para>
Non-numeric operands can be compared.
</para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>CIS COBOL Extensions</title>
        <orderedlist>
          <listitem>
            <para>
Lower case letters a to z are read as upper case letters A to Z.
</para>
          </listitem>
          <listitem>
            <para>
Hexadecimal binary values can be attributed to non-numeric values by expressing literals as X"nn".
</para>
          </listitem>
          <listitem>
            <para>
Reserved word SPACE can be used to clear the whole CRT screen.
</para>
          </listitem>
          <listitem>
            <para>
ANS switch not set enables omission of certain ANSI required "red tape" paragraphs and statements.
</para>
          </listitem>
          <listitem>
            <para>
COMPUTATIONAL-3 or COMP-3 can be specified in the USAGE clause to specify packed internal decimal storage, (BCD).
</para>
          </listitem>
          <listitem>
            <cmdsynopsis>
              <command>ACCEPT</command>
              <arg>data-name-1</arg>
              <arg choice="opt">AT <group choice="req"><arg>data-name-2</arg><arg>literal-1</arg></group></arg>
              <arg>FROM CRT</arg>
            </cmdsynopsis>
            <para>
gives enhanced CRT input features
</para>
          </listitem>
          <listitem>
            <cmdsynopsis>
              <command>DISPLAY</command>
              <group choice="req">
                <arg>data-name-1</arg>
                <arg>literal-1</arg>
              </group>
              <arg choice="opt">AT <group choice="req"><arg>data-name-2</arg><arg>literal-2</arg></group></arg>
              <arg>UPON</arg>
              <group choice="req">
                <arg>CRT</arg>
                <arg>CRT-UNDER</arg>
              </group>
            </cmdsynopsis>
            <para>
gives enhanced CRT output facilities.
</para>
          </listitem>
          <listitem>
            <para>
'CURSOR IS data-name' can be specified in SPECIAL-NAMES and 'data-name'
       in WORKING-STORAGE section to specify CRT cursor address for ACCEPT statements.
</para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section>
      <title>SEQUENTIAL, RELATIVE AND INDEXED I-O</title>
      <section>
        <title>Level One Implementation</title>
        <para>
Fully implemented to Level One.
</para>
      </section>
      <section>
        <title>Level Two Implementation</title>
        <orderedlist>
          <listitem>
            <para>
The START statement is fully supported for Relative and Indexed files.
</para>
          </listitem>
          <listitem>
            <para>
In sequential files, EXTEND is supported.
</para>
          </listitem>
          <listitem>
            <para>
In OPEN and CLOSE statements:
</para>
            <simplelist>
              <member>REEL</member>
              <member>UNIT</member>
            </simplelist>
            <para>
        are accepted for documentation purposes only.
</para>
          </listitem>
          <listitem>
            <para>
LOCK in the CLOSE statement is treated as documentary only.
</para>
          </listitem>
          <listitem>
            <para>
Dynamic access mode and READ NEXT are supported for relative and indexed files.
</para>
          </listitem>
          <listitem>
            <para>
Only the first assignment in each ASSIGN is actioned, others are treated as documentary only at compilation.
</para>
          </listitem>
          <listitem>
            <para>
The I-O-CONTROL paragraph is treated as documentary only as are its RERUN and SAME AREA clauses.
</para>
          </listitem>
          <listitem>
            <para>
The following are treated as documentary only in the FD clause:
  </para>
            <simplelist>
              <member>BLOCK CONTAINS</member>
              <member>CODE-SET</member>
              <member>DATA RECORDS</member>
              <member>LABEL RECORDS</member>
              <member>RECORDS CONTAINS</member>
              <member>VALUE OF</member>
            </simplelist>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>CIS COBOL Extensions</title>
        <orderedlist>
          <listitem>
            <para>
Run Time allocation of file-names. See Appendix F in the <citetitle pubwork="book">CIS COBOL Operating Guide</citetitle>.
</para>
          </listitem>
          <listitem>
            <para>
LINE SEQUENTIAL is an additional file type.
</para>
          </listitem>
          <listitem>
            <para>
All File Description (FD) clauses are optional when ANS switch is unset.
</para>
          </listitem>
          <listitem>
            <para>
Tabbing is available, specified by TAB in the WRITE statement.
</para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section>
      <title>TABLE HANDLING</title>
      <section>
        <title>Level One Implementation</title>
        <para>
Fully implemented to Level One.
</para>
      </section>
      <section>
        <title>CIS COBOL Extensions</title>
        <orderedlist>
          <listitem>
            <para>
Items can be accessed in tables up to 49 dimensions. This extension is
restricted to three dimensions if the ANS switch is set.
</para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section>
      <title>SEGMENTATION</title>
      <section>
        <title>Level One Implementation</title>
        <para>
Fully implemented to Level One.
</para>
      </section>
    </section>
    <section>
      <title>LIBRARY</title>
      <section>
        <title>Level One Implementation</title>
        <para>
Fully implemented to Level One.
</para>
      </section>
    </section>
    <section>
      <title>DEBUG</title>
      <section>
        <title>Level One Implementation</title>
        <para>
Fully implemented to Level 1 plus an additional Interactive Run-Time Debug package.
</para>
      </section>
      <section>
        <title>CIS COBOL Extensions</title>
        <para>
A powerful Run-Time Debug package is available. See Chapter 3 in the <citetitle pubwork="book">CIS COBOL Operating Guide</citetitle>.
</para>
      </section>
    </section>
    <section>
      <title>INTER-PROGRAM COMMUNICATION</title>
      <section>
        <title>Level Two Implementation</title>
        <para>
Fully implemented to Level Two.
  </para>
      </section>
    </section>
  </appendix>
  <index/>
  <colophon>
    <para>This book was reconstructed into DocBook format from a scanned PDF found on the Internet.
  The PDF file already had OCR performed and the text was embedded in the file.
  </para>
    <para>
  The original was published by Acorn Computers Limited in cooperation with the British Broadcasting Corporation.
  </para>
    <para>Source version: <?eval ${project.version}?>
  </para>
  </colophon>
</book>
