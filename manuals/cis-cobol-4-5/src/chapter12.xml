<?xml version="1.0"?>
<chapter xmlns="http://docbook.org/ns/docbook">
  <title>PROGRAMMING TECHNIQUES, USEFUL HINTS AND PROGRAM SIZING</title>
  <titleabbrev>PROGRAMMING TECHNIQUES</titleabbrev>
  <section>
    <title>PROGRAMMING TECHNIQUES</title>
    <indexterm>
      <primary>Programming Techniques</primary>
    </indexterm>
    <indexterm>
      <primary>Techniques, Programming</primary>
    </indexterm>
    <para>
Although COBOL is written in an essentially free form, the user will
nevertheless obtain many advantages from a few self-imposed disciplines. It
is suggested that these should include the following:
</para>
    <orderedlist>
      <listitem>
        <para>
Use of the first 256 bytes of working-storage for variables which are
frequently referenced will produce more compact and efficient code.
</para>
      </listitem>
      <listitem>
        <para>
Use subscripts as sparingly as possible because each subscript has a
storage requirement approximately equal to the size of a normal
instruction.
</para>
      </listitem>
      <listitem>
        <para>
For ACCEPT and DISPLAY the compiler generates one instruction per
elementary item of the data-name being displayed/accepted. Therefore
redefine a group of fields as a single field for DISPLAY whenever
possible and avoid unnecessary numbers of small fields in ACCEPT.
</para>
      </listitem>
      <listitem>
        <para>
Use FILLER instead of a data-name for any elementary field not
referenced explicitly because the word FILLER is compacted to one
character in the Data Dictionary.
</para>
      </listitem>
      <listitem>
        <para>
Keep the number of digits in numeric fields as small as possible.
</para>
      </listitem>
      <listitem>
        <para>
Whenever possible move a group instead of several elementary moves.
</para>
      </listitem>
      <listitem>
        <para>
CIS COBOL provides for values greater than decimal 99 to be stored in a
nonnumeric field of one character,
e.g, <code>PIC X "7F"</code>
</para>
        <para>
This is an extension to the ANSI COBOL standard X3.23 (1974).
(See under Nonnumeric Literals in Chapter 2).
</para>
        <para>
Note, however, that the rules for moving such a field comply with the ANSI
standard in that the contents will be truncated if over decimal 99.
</para>
        <para>
If your operating system returns an error number greater than 99 in the
error Status Key 2 byte (see I-O Status in chapters 5, 6 and 7) careful
redefinition of data-items is required if you wish to display this status
with its correct decimal value. See the appendix that describes disk files
in your operating system specific <citetitle pubwork="book">CIS COBOL Operating Guide</citetitle> for a sample
program.
</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>USEFUL HINTS</title>
    <indexterm>
      <primary>Useful Hints</primary>
    </indexterm>
    <indexterm>
      <primary>Hints, Useful</primary>
    </indexterm>
    <para>
When writing interactive programs the following facilities of CIS COBOL
should be remembered:
</para>
    <orderedlist>
      <listitem>
        <para>
By use of the CURSOR IS facility and the ACCEPT statement it is easy to
program conditionally depending on the cursor position after a menu
type of prompt. The operator need then only move the cursor to the
option required to reply to the prompt, or just press RETURN in the
default case.
</para>
      </listitem>
      <listitem>
        <para>
By use of the ACCEPT FROM CONSOLE facility it is easy to pass
parameters to your program via the Run command line.
See THE ACCEPT STATEMENT in Chapter 3.
</para>
      </listitem>
      <listitem>
        <para>
Remember always to end your CIS COBOL program with a period. Invalid
intermediate code can result if this final period is missing.
</para>
      </listitem>
      <listitem>
        <para>
Note that the data part of an indexed sequential file may be accessed
relatively. However, the first record (relatively) is inaccessible.
since relative file access begins at record number 1, as specified in
the ANSI COBOL standard X3.23(1974).
</para>
      </listitem>
      <listitem>
        <para>
Never define a Linkage Section in the main program, only in sub-programs.
The CIS COBOL Compiler will not treat such a Linkage Section
as an error but it can result in memory content corruption at run time.
</para>
      </listitem>
      <listitem>
        <para>
Be careful to specify literal filenames in Select statements
in quotation marks ("...."). This is the only indication to the
compiler that a literal filename is desired.
</para>
        <para>
(Filename identifiers are not declared in the Working Storage Section
or elsewhere explicitly). The omission of quotation marks where
required will result in an undefined file being accessed at run time.
</para>
      </listitem>
    </orderedlist>
    <indexterm>
      <primary>Sizing</primary>
    </indexterm>
    <table frame="all" colsep="1" rowsep="1">
      <title>Data Dictionary Entry Sizing</title>
      <tgroup cols="2">
        <colspec colname="c1"/>
        <colspec colname="c2"/>
        <thead>
          <row>
            <entry>User-defined name</entry>
            <entry>Number of Bytes<superscript>1</superscript></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <simplelist>
                <member>File-name</member>
                <member>Record-name</member>
                <member>Key-name</member>
                <member>Status-name</member>
                <member>Paragraph-name</member>
                <member>Alphanumeric &lt; 32 characters</member>
                <member>Alphanumeric &#x2265; 32 characters</member>
                <member>Numeric integer</member>
                <member>Numeric non integer</member>
                <member>Numeric edited</member>
              </simplelist>
            </entry>
            <entry>
              <simplelist>
                <member>18 + n</member>
                <member>8 + n</member>
                <member>8 + n</member>
                <member>8 + n</member>
                <member>6 + n</member>
                <member>8 + n<superscript>2</superscript></member>
                <member>7 + n<superscript>2</superscript></member>
                <member>8 + n<superscript>2</superscript></member>
                <member>7 + n<superscript>2</superscript></member>
                <member>8 + n<superscript>2</superscript></member>
                <member>7 + n + x</member>
              </simplelist>
            </entry>
          </row>
          <row>
            <entry namest="c1" nameend="c2">
              <orderedlist>
                <listitem>
                  <para>
n = number of characters in user-defined name.
</para>
                  <para>
           For a FILLER, n = 1.
</para>
                  <para>
          x  number of characters in PICture, after coalescing repetitions.
</para>
                  <para>
                    <literallayout>e.g. 9  9  9  9  .  9   = 3 bytes
               9  (4)  .  9       =  3 bytes
               Z (2) 9 (4) . 9 (3)= 4 bytes</literallayout>
                  </para>
                </listitem>
                <listitem>
                  <para>
          Subtract 1 byte if item is in the first 256 bytes of Working-Storage.
</para>
                  <para>
          Add 4 bytes if item has an OCCURS clause associated with it.
</para>
                  <para>
          Add 2 bytes if item is subordinate to an item described with OCCURS.
</para>
                </listitem>
              </orderedlist>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
</chapter>
