<?xml version="1.0"?>
<chapter xmlns="http://docbook.org/ns/docbook">
  <title>INTERPROGRAM COMMUNICATION</title>
  <section>
    <title>INTRODUCTION TO THE INTER-PROGRAM COMMUNICATION MODULE</title>
    <para>
The Inter-Program Communication module provides a facility by which a
program can communicate with one or more programs. This provides a
programmer with a modular programming capability. Each module when CALLed
is loaded dynamically by the Run Time System. Communication is provided by:
</para>
    <itemizedlist>
      <listitem>
        <para>The ability to transfer control from one program to another within a run unit</para>
      </listitem>
      <listitem>
        <para>The ability for both programs to have access to the same data items.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>DATA DIVISION IN THE INTER-PROGRAM COMMUNICATION MODULE</title>
    <indexterm>
      <primary>Data Division in Inter-Program</primary>
    </indexterm>
    <indexterm>
      <primary>Inter-Program Communication, Data Division</primary>
    </indexterm>
    <section>
      <title>LINKAGE SECTION</title>
    <indexterm>
      <primary>Linkage Section</primary>
    </indexterm>
    <indexterm>
      <primary>Section, Linkage</primary>
    </indexterm>
      <para>
The Linkage Section in a program is meaningful if and only if the object
program is to function under the control of a CALL statement, and the CALL
statement in the calling program contains a USING phrase.
</para>
      <para>
The Linkage Section is used for describing data that is available through
the calling program but is to be referred to in both the calling and the
called program. No space is allocated in the program for data items
referenced by data-names in the Linkage Section of that program. Procedure
Division references to these data items are resolved at object time by
equating the reference in the called program to the location used in the
calling program. In the case of index-names, no such correspondence is
established. Index-names in the called and calling program always refer to
separate indices.
</para>
      <para>
Data items defined in the Linkage Section of the called program may be
referenced within the Procedure Division of the called program only if they
are specified as operands of the USING phrase of the Procedure Division
header or are subordinate to such operands, and the object program is under
the control of a CALL statement that specifies a USING phrase.
</para>
      <para>
The structure of the Linkage Section is the same as that previously
described for the Working-Storage Section, beginning with a section header,
followed by data description entries for noncontiguous data items and/or
record description entries.
</para>
      <para>
Each Linkage Section record-name and noncontiguous item name must be unique
within the called program since it cannot be qualified, Data items defined
in the Linkage Section of the called program must not be associated with
data items defined in the Report Section of the calling program.
</para>
      <para>
Of those items defined in the Linkage Section only data-name-1, data-name-2, ...
in the USING phrase of the Procedure Division header, data items
subordinate to these data-names, and condition-names and/or
index-names associated with such data-names and/or subordinate data items,
may be referenced in the Procedure Division.
</para>
      <section>
        <title>Noncontiguous Linkage Storage</title>
        <para>
Items in the Linkage Section that bear no hierarchic relationship to one
another need not be grouped into records and are classified and defined as
noncontiguous elementary items. Each of these data items is defined in a
separate data description entry which begins with the special level-number 77.
</para>
        <para>
The following data clauses are required in each data description entry:
</para>
        <itemizedlist>
          <listitem>
            <para>Level-number 77</para>
          </listitem>
          <listitem>
            <para>Data-name</para>
          </listitem>
          <listitem>
            <para>The PICTURE clause or the USAGE IS INDEX clause</para>
          </listitem>
        </itemizedlist>
        <para>
Other data description clauses are optional and can be used to complete the
description of the item if necessary.
</para>
      </section>
    </section>
  </section>
  <section>
    <title>PROCEDURE DIVISION IN THE INTER-PROGRAM COMMUNICATION MODULE</title>
    <indexterm>
      <primary>Procedure Division in the Inter-Program Communication Module</primary>
    </indexterm>
    <indexterm>
      <primary>Inter-Program Communication, Procedure Division</primary>
    </indexterm>
    <section>
      <title>THE PROCEDURE DIVISION HEADER</title>
      <indexterm>
        <primary>Procedure Division Header</primary>
      </indexterm>
      <para>
The Procedure Division is identified by and must begin with the following
header:
</para>
      <programlisting>
      PROCEDURE DIVISION  [USING data-name-1  [, data-name-2]  ...]
</programlisting>
      <para>
The USING phrase is present if and only if the object program is to function
under the control of a CALL statement, and the CALL statement in the calling
program contains a USING phrase.
</para>
      <para>
Each of the operands in the USING phrase of the Procedure Division header
must be defined as a data item in the Linkage Section of the program in
which this header occurs, and it must have a 01 or 77 level-number.
</para>
      <para>
Within a called program, Linkage Section data items are processed according
to their data descriptions given in the called program.
</para>
      <para>
When the USING phrase is present, the object program operates as if
data-name-1 of the Procedure Division header in the called program and
data-name-1 in the USING phrase of the CALL statement in the calling program
refer to a single set of data that is equally available to both the called
and calling programs. Their descriptions must define an equal number of
character positions; however they need not be the same name. In like
manner, there is an equivalent relationship between data-name-2, ..., in the
USING phrase of the called program and data-name-2, ..., in the USING phrase
of the CALL statement in the calling program. A data-name must not appear
more than once in the USING phrase in the Procedure Division header of the
called program; however, a given data-name may appear more than once in the
same USING phrase of a CALL statement.
</para>
    </section>
    <section>
      <title>THE CALL STATEMENT</title>
      <indexterm>
        <primary>CALL Statement</primary>
      </indexterm>
      <indexterm>
        <primary>Statement, CALL</primary>
      </indexterm>
      <section>
        <title>Function</title>
        <para>
The CALL statement causes control to be transferred from one object program
to another, within the run unit.
      </para>
      </section>
      <section>
        <title>General Format</title>
        <para>
Format 1
          </para>
        <cmdsynopsis>
          <command>CALL</command>
          <group choice="req">
            <arg>identifier-1</arg>
            <arg>literal-1</arg>
          </group>
          <arg choice="opt">
            <arg>USING data-name-1</arg>
            <arg choice="opt" rep="repeat">, data-name-2</arg>
          </arg>
          <arg choice="opt">ON OVERFLOW imperative-statement</arg>
        </cmdsynopsis>
        <para>
Format 2
      </para>
        <cmdsynopsis role="extension">
          <command>CALL</command>
          <group choice="req">
            <arg>literal-2</arg>
            <arg>identifier-2</arg>
          </group>
          <arg choice="opt">
            <arg>USING data-name-3</arg>
            <arg choice="opt" rep="repeat">, data-name-4</arg>
          </arg>
        </cmdsynopsis>
      </section>
      <section>
        <title>Syntax Rules</title>
        <orderedlist>
          <listitem>
            <para>
Literal-1 must be a nonnumeric literal.
</para>
          </listitem>
          <listitem>
            <para>
Identifier-1 must be defined as an alphanumeric data item usage display.
</para>
          </listitem>
          <listitem>
            <para>
The USING phrase is included in the CALL statement only if there is a
USING phrase in the Procedure Division header of the called program and
the number of operands in each USING phrase must be identical.
</para>
          </listitem>
          <listitem>
            <para>
Each of the operands in the USING phrase must have been defined as a
data item in the File Section, Working-Storage Section, or Linkage
Section, and must have a level-number of 01 or 77.
</para>
          </listitem>
          <listitem>
            <para>
              <phrase role="extension">Literal-2 must be a nonnumeric literal.</phrase>
            </para>
          </listitem>
          <listitem>
            <para>
              <phrase role="extension">Identifier-2 must must be defined as an alphanumeric data item with a
              numeric value, e.g. CALL "3" or CALL D-NAM where D-NAM is defined as
              class alphanumeric, and usage display, containing a numeric value.
</phrase>
            </para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>General Rules</title>
        <orderedlist>
          <listitem>
            <para>
The program whose name is specified by the value of literal-1 or
identifier-1 is a called intermediate code module, literal-2 is a
called run time subroutine; the program in which the CALL statement
appears is the calling program.
</para>
          </listitem>
          <listitem>
            <para>
The execution of a CALL statement causes control to pass to the called program.
</para>
          </listitem>
          <listitem>
            <para>
In format 1, a called intermediate code module is loaded from disk the
first time it is called within a run-unit and the first time it is
called after a CANCEL to the called program.
     </para>
            <para>
On all other entries into the called program, the state of the program
remains unchanged from its state when last executed. This includes all
data fields, the status and positioning of all files, and all alterable
switch settings.
</para>
          </listitem>
          <listitem>
            <para>
              <phrase role="extension">In format 2, a called run time subroutine is always in the state in which it last exited.</phrase>
            </para>
          </listitem>
          <listitem>
            <para>
If during the execution of a CALL statement, it is determined that the
available portion of run-time memory is incapable of accommodating the
program specified in the CALL statement, the next sequential
instruction is executed. If ON OVERFLOW has been specified, the
associated imperative statement is executed before the next instruction is executed.
</para>
          </listitem>
          <listitem>
            <para>
Called programs may contain CALL statements. However, a called program
must not contain a call statement that directly or indirectly calls the
calling program.
</para>
          </listitem>
          <listitem>
            <para>
The data-names, specified by the USING phrase of the CALL statement,
indicate those data items available to a calling program that may be
referred to in the called program. The order of appearance of the
data-names in the USING phrase of the CALL statement and the USING
phrase in the Procedure Division header is critical. Corresponding
data-names refer to a single set of data which is available to the
called and calling program. The correspondence is positional, not by
name. In the case of index-names, no such correspondence is
established. Index-names in the called and calling program always
refer to separate indices.
</para>
          </listitem>
          <listitem>
            <para>
The CALL statement may appear anywhere within a segmented program.
Therefore, when a CALL statement appears in a section with a
segment-number greater than or equal to 50, that segment is in its last
used state when the EXIT PROGRAM statement returns control to the
calling program.
</para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section>
      <title>THE CANCEL STATEMENT</title>
      <indexterm>
        <primary>CANCEL Statement</primary>
      </indexterm>
      <indexterm>
        <primary>Statement, CANCEL</primary>
      </indexterm>
      <section>
        <title>Function</title>
        <para>
The CANCEL statement releases the memory areas occupied by the referred to program.
</para>
      </section>
      <section>
        <title>General Format</title>
        <cmdsynopsis>
          <command>CANCEL</command>
          <group choice="req">
            <arg>identifier-1</arg>
            <arg>literal-1</arg>
          </group>
          <arg choice="opt" rep="repeat">
            <group choice="req">
              <arg>identifier-2</arg>
              <arg>literal-2</arg>
            </group>
          </arg>
        </cmdsynopsis>
      </section>
      <section>
        <title>Syntax Rules</title>
        <orderedlist>
          <listitem>
            <para>
Literal-1, literal-2, ... , must each be a nonnumeric literal.
</para>
          </listitem>
          <listitem>
            <para>
Identifier-1, identifier-2, must each be defined as an
alphanumeric data item such that its value can be a program name.
</para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>General Rules</title>
        <orderedlist>
          <listitem>
            <para>
After the execution of a CANCEL statement, the program referred to
ceases to have any logical relationship to the run unit in which the
CANCEL statement appears. A subsequently executed CALL statement
naming the same program will result in that program being initiated in
its initial state. The memory areas associated with the named programs
are released so as to be made available for disposition by the
operating system.
</para>
          </listitem>
          <listitem>
            <para>
A program named in the CANCEL statement must not refer to any program
that has been called and has not yet executed an EXIT PROGRAM statement.
</para>
          </listitem>
          <listitem>
            <para>
A logical relationship to a cancelled subprogram is established only by
execution of a subsequent call statement.
</para>
          </listitem>
          <listitem>
            <para>
A called program is cancelled either by being referred to as the
operand of a CANCEL statement or by the termination of the run unit of
which the program is a member.
</para>
          </listitem>
          <listitem>
            <para>
No action is taken when a CANCEL statement is executed naming a program
that has not been called in this run unit or has been called and is at
present cancelled. Control passes to the next statement.
</para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section>
      <title>THE EXIT PROGRAM STATEMENT</title>
      <indexterm>
        <primary>EXIT PROGRAM Statement</primary>
      </indexterm>
      <indexterm>
        <primary>Statement, EXIT PROGRAM</primary>
      </indexterm>
      <section>
        <title>Function</title>
        <para>
The EXIT PROGRAM statement marks the logical end of a called program.
     </para>
      </section>
      <section>
        <title>General Format</title>
        <cmdsynopsis>
          <command>EXIT PROGRAM</command>
        </cmdsynopsis>
      </section>
      <section>
        <title>Syntax Rules</title>
        <orderedlist>
          <listitem>
            <para>The EXIT PROGRAM statement must appear in a sentence by itself.
             </para>
          </listitem>
          <listitem>
            <para>The EXIT PROGRAM sentence must be the only sentence in the paragraph.
             </para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>General Rule</title>
        <para>
An execution of an EXIT PROGRAM statement in a called program causes control
to be passed to the calling program. Execution of an EXIT PROGRAM statement
in a program which is not called behaves as if the statement were an EXIT
statement. (See THE EXIT STATEMENT in Chapter 3) .
    </para>
      </section>
    </section>
  </section>
</chapter>
